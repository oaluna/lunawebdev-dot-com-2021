{
  "status": "ok",
  "feed": {
    "url": "https://medium.com/feed/@oaluna",
    "title": "Stories by Oscar Luna on Medium",
    "link": "https://medium.com/@oaluna?source=rss-be00f566a88f------2",
    "author": "",
    "description": "Stories by Oscar Luna on Medium",
    "image": "https://cdn-images-1.medium.com/fit/c/150/150/1*0cxr__V3xZ-g-Yw9A9ayGw.jpeg"
  },
  "items": [
    {
      "title": "Getting Started with Express.js",
      "pubDate": "2021-08-11 01:27:22",
      "link": "https://medium.com/codex/getting-started-with-express-js-721ef88efe99?source=rss-be00f566a88f------2",
      "guid": "https://medium.com/p/721ef88efe99",
      "author": "Oscar Luna",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*ITbeu1PrRL4EsHt3ZPoVtw.png",
      "description": "\n<h4>How to set up and leverage server interactions and routing using Express.js</h4>\n<p>Hello! Today I will discuss how to use the Express framework to create a rudimentary server for our frontend code. This article will also show how to leverage routing and interacting with your Express server using the Node js. Let\u2019s get\u00a0started!</p>\n<h3>What is\u00a0Express?</h3>\n<p>Express.js is a Node.js <em>framework </em>that exposes a minimal, yet versatile set of<em> middlewares </em>that allow us to, at a surface level, scaffold our Node.js applications to a server. The functionality available to us when using Express is quite extensive. We can use Express to create a router, define responses to send from a certain route endpoint, handle user authentication/authorization, interact with 3rd-party API services, serve static or server-side files, and even, given its unopinionated handling of databases, provide configuration for relational and non-relational databases like MongoDB or PostgreSQL. All of the aforementioned features also make for Express to be flexible with its structure, so there is truly no one way to create an Express application; its structure is ultimately determined by what your application needs are or what your developer team\u00a0prefers.</p>\n<h3>A Simple Express\u00a0Server</h3>\n<p>Let\u2019s create a rudimentary Express server along with a simple <em>middleware</em> function that will use Node.js request and response objects to send and receive data during the request-response cycle. (Expect to see the word<em> middleware </em>a lot in this article; Express largely emphasizes the use of middleware). First, we must import the Express module to our designated server.js file and instantiate a port number, either by using the global environment variable for PORT or by providing a number value. We will also need to instantiate the Express application by calling the Express.js express() function. Lastly, we need to listen for connections for the given port, so we must also invoke the built-in app.listen(), which will receive the port value and confirm a connection to the port by sending a message to the console. The example below demonstrates what that can look\u00a0like.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ITbeu1PrRL4EsHt3ZPoVtw.png\"><figcaption>A rudimentary Express.js server for our Node.js applications. (created at <a href=\"https://carbon.now.sh/\">https://carbon.now.sh</a>)</figcaption></figure><h3>Routing</h3>\n<p>As I mentioned, Express.js allows us to leverage HTTP requests using middleware functions. The example above contains a GET request that points to the root module `/` and, like all middleware functions, receives request and response objects. This example middleware simply logs a message to the console, but Express allows us to use a wide variety of middleware that leverage different functionalities for HTTP requests.</p>\n<p>Another option for defining routes in our Express application is the use of the Express Router module. This allows us to use a middleware system that handles routing using a Router() module. The example below is an implementation of the same example server above that uses the Router() module to handle relevant route methods (GET, PUSH, POST,\u00a0DELETE).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8t2Jk8EQOh7OuwaXaD5uBw.png\"></figure><p>Router() can also leverage handler functions based on its HTTP verb. For example, a GET request can handle requesting a list of users by their ID or a user\u2019s news feed. POST can leverage logins or adding new content to a list of posts by an authorized user. PUT can be used to update a user\u2019s account information. Lastly, DELETE, apart from removing account information from a user database, can also leverage the removal of session cookies when a user logs out of an\u00a0account.</p>\n<h3>Express App Generator</h3>\n<p>Apart from creating an Express.js server and managing routes and client-server interactions through built-in middleware, to implement Express.js to a web application, we can use a CLI command to generate a server file with Express middleware implemented out of the box. The generator also provides options for what frontend markup to use (we can choose between Pug, Handlebars.js, EJS, or Hogan.js).</p>\n<p>We can use the CLI command npx express-generator to initialize the Express App Generator (Node.js 8.2.0 and later). Once installed we can begin setting up the configuration for our generated Express application. Once we run this command we can start choosing optional additives like a frontend engine. By default, Express Generator will use Jade as the UI engine. If you prefer to use a static HTML file instead of a UI engine, you can run express it in your terminal with the tag\u200a\u2014\u200ano-view\u00a0.</p>\n<p>Once our options are set, the Express Generator will add files to accompany the Express server file such as UI components (using the chosen engine, if any), a stylesheet, and their respective route files. The image below is a representation of the default file structure that uses Jade as its UI engine if no option is chosen for\u00a0one:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bJliQGCQe-nP0mm1jWrhXw.png\"><figcaption>The default file tree created by the Express Generator CLI (created at <a href=\"https://carbon.now.sh/\">https://carbon.now.sh</a>)</figcaption></figure><p>After the file tree is generated, the terminal should display a message instructing to install dependencies by runningnpm install or yarn before we begin running our application. After our application\u2019s dependencies are installed, we can run the application by running npm start or yarn start\u00a0.</p>\n<p>Hopefully, you\u2019ve gained a better understanding of how to implement Express.js for your web application, now that you\u2019ve read about some basic functionalities as well as some alternative methods of implementation. If you would like to see more examples of how to use Express.js, their <a href=\"https://github.com/expressjs/express/tree/master/examples\">Github repository</a> provides many different use cases for building an Express server. That\u2019s all for today! Thank you so much for reading! If you\u2019d like further resources for learning about this framework in-depth, you can find a list of resources below. Until next\u00a0time!</p>\n<h3>Sources Cited</h3>\n<p>\u201cExpress\u200a\u2014\u200aNode.Js Web Application Framework.\u201d <em>Express\u200a\u2014\u200aNode.Js Web Application Framework</em>, StrongLoop, IBM, and other expressjs.com contributors, 2017, <a href=\"http://expressjs.com/\">http://expressjs.com</a>. Accessed 9 Aug.\u00a02021.</p>\n<p>\u201cExpress Application Generator.\u201d <em>Express\u200a\u2014\u200aNode.Js Web Application Framework</em>, <a href=\"http://expressjs.com/en/starter/generator.html.\">http://expressjs.com/en/starter/generator.html.</a> Accessed 9 Aug.\u00a02021.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=721ef88efe99\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/codex/getting-started-with-express-js-721ef88efe99\">Getting Started with Express.js</a> was originally published in <a href=\"https://medium.com/codex\">CodeX</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
      "content": "\n<h4>How to set up and leverage server interactions and routing using Express.js</h4>\n<p>Hello! Today I will discuss how to use the Express framework to create a rudimentary server for our frontend code. This article will also show how to leverage routing and interacting with your Express server using the Node js. Let\u2019s get\u00a0started!</p>\n<h3>What is\u00a0Express?</h3>\n<p>Express.js is a Node.js <em>framework </em>that exposes a minimal, yet versatile set of<em> middlewares </em>that allow us to, at a surface level, scaffold our Node.js applications to a server. The functionality available to us when using Express is quite extensive. We can use Express to create a router, define responses to send from a certain route endpoint, handle user authentication/authorization, interact with 3rd-party API services, serve static or server-side files, and even, given its unopinionated handling of databases, provide configuration for relational and non-relational databases like MongoDB or PostgreSQL. All of the aforementioned features also make for Express to be flexible with its structure, so there is truly no one way to create an Express application; its structure is ultimately determined by what your application needs are or what your developer team\u00a0prefers.</p>\n<h3>A Simple Express\u00a0Server</h3>\n<p>Let\u2019s create a rudimentary Express server along with a simple <em>middleware</em> function that will use Node.js request and response objects to send and receive data during the request-response cycle. (Expect to see the word<em> middleware </em>a lot in this article; Express largely emphasizes the use of middleware). First, we must import the Express module to our designated server.js file and instantiate a port number, either by using the global environment variable for PORT or by providing a number value. We will also need to instantiate the Express application by calling the Express.js express() function. Lastly, we need to listen for connections for the given port, so we must also invoke the built-in app.listen(), which will receive the port value and confirm a connection to the port by sending a message to the console. The example below demonstrates what that can look\u00a0like.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ITbeu1PrRL4EsHt3ZPoVtw.png\"><figcaption>A rudimentary Express.js server for our Node.js applications. (created at <a href=\"https://carbon.now.sh/\">https://carbon.now.sh</a>)</figcaption></figure><h3>Routing</h3>\n<p>As I mentioned, Express.js allows us to leverage HTTP requests using middleware functions. The example above contains a GET request that points to the root module `/` and, like all middleware functions, receives request and response objects. This example middleware simply logs a message to the console, but Express allows us to use a wide variety of middleware that leverage different functionalities for HTTP requests.</p>\n<p>Another option for defining routes in our Express application is the use of the Express Router module. This allows us to use a middleware system that handles routing using a Router() module. The example below is an implementation of the same example server above that uses the Router() module to handle relevant route methods (GET, PUSH, POST,\u00a0DELETE).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8t2Jk8EQOh7OuwaXaD5uBw.png\"></figure><p>Router() can also leverage handler functions based on its HTTP verb. For example, a GET request can handle requesting a list of users by their ID or a user\u2019s news feed. POST can leverage logins or adding new content to a list of posts by an authorized user. PUT can be used to update a user\u2019s account information. Lastly, DELETE, apart from removing account information from a user database, can also leverage the removal of session cookies when a user logs out of an\u00a0account.</p>\n<h3>Express App Generator</h3>\n<p>Apart from creating an Express.js server and managing routes and client-server interactions through built-in middleware, to implement Express.js to a web application, we can use a CLI command to generate a server file with Express middleware implemented out of the box. The generator also provides options for what frontend markup to use (we can choose between Pug, Handlebars.js, EJS, or Hogan.js).</p>\n<p>We can use the CLI command npx express-generator to initialize the Express App Generator (Node.js 8.2.0 and later). Once installed we can begin setting up the configuration for our generated Express application. Once we run this command we can start choosing optional additives like a frontend engine. By default, Express Generator will use Jade as the UI engine. If you prefer to use a static HTML file instead of a UI engine, you can run express it in your terminal with the tag\u200a\u2014\u200ano-view\u00a0.</p>\n<p>Once our options are set, the Express Generator will add files to accompany the Express server file such as UI components (using the chosen engine, if any), a stylesheet, and their respective route files. The image below is a representation of the default file structure that uses Jade as its UI engine if no option is chosen for\u00a0one:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bJliQGCQe-nP0mm1jWrhXw.png\"><figcaption>The default file tree created by the Express Generator CLI (created at <a href=\"https://carbon.now.sh/\">https://carbon.now.sh</a>)</figcaption></figure><p>After the file tree is generated, the terminal should display a message instructing to install dependencies by runningnpm install or yarn before we begin running our application. After our application\u2019s dependencies are installed, we can run the application by running npm start or yarn start\u00a0.</p>\n<p>Hopefully, you\u2019ve gained a better understanding of how to implement Express.js for your web application, now that you\u2019ve read about some basic functionalities as well as some alternative methods of implementation. If you would like to see more examples of how to use Express.js, their <a href=\"https://github.com/expressjs/express/tree/master/examples\">Github repository</a> provides many different use cases for building an Express server. That\u2019s all for today! Thank you so much for reading! If you\u2019d like further resources for learning about this framework in-depth, you can find a list of resources below. Until next\u00a0time!</p>\n<h3>Sources Cited</h3>\n<p>\u201cExpress\u200a\u2014\u200aNode.Js Web Application Framework.\u201d <em>Express\u200a\u2014\u200aNode.Js Web Application Framework</em>, StrongLoop, IBM, and other expressjs.com contributors, 2017, <a href=\"http://expressjs.com/\">http://expressjs.com</a>. Accessed 9 Aug.\u00a02021.</p>\n<p>\u201cExpress Application Generator.\u201d <em>Express\u200a\u2014\u200aNode.Js Web Application Framework</em>, <a href=\"http://expressjs.com/en/starter/generator.html.\">http://expressjs.com/en/starter/generator.html.</a> Accessed 9 Aug.\u00a02021.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=721ef88efe99\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/codex/getting-started-with-express-js-721ef88efe99\">Getting Started with Express.js</a> was originally published in <a href=\"https://medium.com/codex\">CodeX</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
      "enclosure": {},
      "categories": [
        "expressjs",
        "nodejs",
        "code-newbie",
        "full-stack",
        "javascript"
      ]
    },
    {
      "title": "Getting Started Using Redux",
      "pubDate": "2021-08-06 01:42:28",
      "link": "https://medium.com/codex/getting-started-using-redux-4dcf6845535d?source=rss-be00f566a88f------2",
      "guid": "https://medium.com/p/4dcf6845535d",
      "author": "Oscar Luna",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*jY5YoszgF3fqbjeI_4GspQ.png",
      "description": "\n<h4>Unidirectional State Management using reducers, actions, and dispatchers</h4>\n<p>Hello! Today I\u2019m going to talk about state management using Redux, a Flux-based framework for enforcing a unidirectional data flow when it comes to managing state in react. This popular framework, though small, made a bit of an impact and is still used to date. Learning Redux can be a bit of a headache when it comes to wading among all the boilerplate. This article will hopefully help attain a better understanding of Redux for you,, the reader. Without further ado, let\u2019s dive right\u00a0in!</p>\n<h3>Flux Architecture</h3>\n<p>Though Redux is based on Flux architecture, Flux itself isn\u2019t a framework or library at all. In fact, Flux architecture is a pattern. A Flux flow managed its events in a three-point circular pattern that flowed in a single direction. This idea of <em>unidirectional data flow</em> is adopted by Redux and consists of similar architecture. In Flux, a state change is described in an <em>action, </em>which is then sent to a <em>dispatcher, </em>where a defined action will handle the state change. Finally, the state is saved in a <em>store </em>to be sent to the dispatcher on the next state\u00a0change.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*jY5YoszgF3fqbjeI_4GspQ.png\"><figcaption>Flux Architecture Flow (created at\u00a0<a href=\"https://canva.com/\">Canva</a>)</figcaption></figure><p>In short, stores subscribe to actions, which get sent to a dispatcher, which then notifies the store of the action and updates its state accordingly, updates the view if needed, and then awaits the next action to repeat the\u00a0process.</p>\n<h3>Redux</h3>\n<p>Flux\u2019s enforcement of a unidirectional data flow is what Redux is based on. This framework allows our React applications to maintain a single source of truth for their state. Using Redux to centralize our state-related logic we can refocus on component architecture. Function-based components can now focus on a single role. Also, its simplicity in architecture has made it a preference over the Flux flow for managing complex interactions between components.</p>\n<p>To get started with Redux in your React applications (assuming you have your React frontend already), you can start by installing Redux as well as the React-Redux bindings by running npm install redux react-redux or $yarn add redux react-redux from your terminal.</p>\n<p>At the project root, we can import a Provider from the React-Redux library to index.js. The Provider module allows us to access our store, where our application\u2019s state will reside. To do that we can importcreateStore from the Redux library to create a store object from a reducer, which we will discuss more in a bit. The examples below are from an example counter application that uses a counterReducer to hold an initial value for our\u00a0state.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*suTcormJvsIROO_fHHrJsw.png\"><figcaption>index.js (created at https://carbon.now.sh)</figcaption></figure><h3>Reducers</h3>\n<p>As mentioned before, we will also need a store object that will hold an application\u2019s state. Our store can subscribe to actions received from dispatchers as state updates. When writing a reducer we must pass an initial value for our state. For the counterReducer that means an initial count of\u00a0zero.</p>\n<p>A reducer will also need to receive an action object containing properties that will modify a <em>copy </em>of our state and return that copy. Remember that we must not modify state directly, which makes it important that we avoid doing something like return state.count++\u00a0. The example demonstrates two action types; one for incrementing the count and one for decrementing the count. It\u2019s optional to store action types as string constants in their own file, i.e. const INCREMENT = \u201cINCREMENT\u201d, especially when dealing with multiple actions. This way one can keep all their action types in a single place. The example below is a smaller project so declaring string constants for action\u00a0types.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*9ce_NNE315wz43v0HY9wlA.png\"><figcaption>reducer.js (created at <a href=\"https://carbon.now.sh)/\">https://carbon.now.sh)</a></figcaption></figure><p>Redux enforces this flow with the intent of keeping the state tree immutable. Do NOT directly change state! The example above returns the state using a <a href=\"https://devdocs.io/javascript/operators/spread_syntax\">spread operator</a><em>, </em>which will expand our state object for each key-value pair within it. The spread operator creates a copy of an object literal that we may modify using our action creators in place of the state object\u00a0itself.</p>\n<h3>Dispatchers</h3>\n<p>To dispatch the actions we have defined, we can use a dispatch function to notify the store of an action in need of execution. The example below implements the use of the dispatch function by calling it in a method for each\u00a0action.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*shU4I9OVbcE_5I5u3FO6lA.png\"></figure><p>And there you have it! If you run this React application you will have a simple counter with a button to increment the count number displayed and a button to decrement the count number. (If you want to keep your function components pure you can simply define your dispatchers separately.)</p>\n<p>That\u2019s all for today! Check out the links below for more learning resources about using Redux, including the Redux documentation as well as a book that covers the fundamentals of implementing Redux to React applications. Thanks for reading! Until next\u00a0time!</p>\n<h4>Sources Cited</h4>\n<p>\u201cAPI Reference | Redux.\u201d <em>Redux\u200a\u2014\u200aA Predictable State Container for JavaScript Apps. | Redux</em>, <a href=\"https://redux.js.org/api.\">https://redux.js.org/api.</a> Accessed 2 Aug.\u00a02021.</p>\n<p>Dinkevich, Boris, and Ilya Gelman. <em>The Complete Redux Book</em>. Leanpub, 2017, pp.\u00a012\u201324.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4dcf6845535d\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/codex/getting-started-using-redux-4dcf6845535d\">Getting Started Using Redux</a> was originally published in <a href=\"https://medium.com/codex\">CodeX</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
      "content": "\n<h4>Unidirectional State Management using reducers, actions, and dispatchers</h4>\n<p>Hello! Today I\u2019m going to talk about state management using Redux, a Flux-based framework for enforcing a unidirectional data flow when it comes to managing state in react. This popular framework, though small, made a bit of an impact and is still used to date. Learning Redux can be a bit of a headache when it comes to wading among all the boilerplate. This article will hopefully help attain a better understanding of Redux for you,, the reader. Without further ado, let\u2019s dive right\u00a0in!</p>\n<h3>Flux Architecture</h3>\n<p>Though Redux is based on Flux architecture, Flux itself isn\u2019t a framework or library at all. In fact, Flux architecture is a pattern. A Flux flow managed its events in a three-point circular pattern that flowed in a single direction. This idea of <em>unidirectional data flow</em> is adopted by Redux and consists of similar architecture. In Flux, a state change is described in an <em>action, </em>which is then sent to a <em>dispatcher, </em>where a defined action will handle the state change. Finally, the state is saved in a <em>store </em>to be sent to the dispatcher on the next state\u00a0change.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*jY5YoszgF3fqbjeI_4GspQ.png\"><figcaption>Flux Architecture Flow (created at\u00a0<a href=\"https://canva.com/\">Canva</a>)</figcaption></figure><p>In short, stores subscribe to actions, which get sent to a dispatcher, which then notifies the store of the action and updates its state accordingly, updates the view if needed, and then awaits the next action to repeat the\u00a0process.</p>\n<h3>Redux</h3>\n<p>Flux\u2019s enforcement of a unidirectional data flow is what Redux is based on. This framework allows our React applications to maintain a single source of truth for their state. Using Redux to centralize our state-related logic we can refocus on component architecture. Function-based components can now focus on a single role. Also, its simplicity in architecture has made it a preference over the Flux flow for managing complex interactions between components.</p>\n<p>To get started with Redux in your React applications (assuming you have your React frontend already), you can start by installing Redux as well as the React-Redux bindings by running npm install redux react-redux or $yarn add redux react-redux from your terminal.</p>\n<p>At the project root, we can import a Provider from the React-Redux library to index.js. The Provider module allows us to access our store, where our application\u2019s state will reside. To do that we can importcreateStore from the Redux library to create a store object from a reducer, which we will discuss more in a bit. The examples below are from an example counter application that uses a counterReducer to hold an initial value for our\u00a0state.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*suTcormJvsIROO_fHHrJsw.png\"><figcaption>index.js (created at https://carbon.now.sh)</figcaption></figure><h3>Reducers</h3>\n<p>As mentioned before, we will also need a store object that will hold an application\u2019s state. Our store can subscribe to actions received from dispatchers as state updates. When writing a reducer we must pass an initial value for our state. For the counterReducer that means an initial count of\u00a0zero.</p>\n<p>A reducer will also need to receive an action object containing properties that will modify a <em>copy </em>of our state and return that copy. Remember that we must not modify state directly, which makes it important that we avoid doing something like return state.count++\u00a0. The example demonstrates two action types; one for incrementing the count and one for decrementing the count. It\u2019s optional to store action types as string constants in their own file, i.e. const INCREMENT = \u201cINCREMENT\u201d, especially when dealing with multiple actions. This way one can keep all their action types in a single place. The example below is a smaller project so declaring string constants for action\u00a0types.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*9ce_NNE315wz43v0HY9wlA.png\"><figcaption>reducer.js (created at <a href=\"https://carbon.now.sh)/\">https://carbon.now.sh)</a></figcaption></figure><p>Redux enforces this flow with the intent of keeping the state tree immutable. Do NOT directly change state! The example above returns the state using a <a href=\"https://devdocs.io/javascript/operators/spread_syntax\">spread operator</a><em>, </em>which will expand our state object for each key-value pair within it. The spread operator creates a copy of an object literal that we may modify using our action creators in place of the state object\u00a0itself.</p>\n<h3>Dispatchers</h3>\n<p>To dispatch the actions we have defined, we can use a dispatch function to notify the store of an action in need of execution. The example below implements the use of the dispatch function by calling it in a method for each\u00a0action.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*shU4I9OVbcE_5I5u3FO6lA.png\"></figure><p>And there you have it! If you run this React application you will have a simple counter with a button to increment the count number displayed and a button to decrement the count number. (If you want to keep your function components pure you can simply define your dispatchers separately.)</p>\n<p>That\u2019s all for today! Check out the links below for more learning resources about using Redux, including the Redux documentation as well as a book that covers the fundamentals of implementing Redux to React applications. Thanks for reading! Until next\u00a0time!</p>\n<h4>Sources Cited</h4>\n<p>\u201cAPI Reference | Redux.\u201d <em>Redux\u200a\u2014\u200aA Predictable State Container for JavaScript Apps. | Redux</em>, <a href=\"https://redux.js.org/api.\">https://redux.js.org/api.</a> Accessed 2 Aug.\u00a02021.</p>\n<p>Dinkevich, Boris, and Ilya Gelman. <em>The Complete Redux Book</em>. Leanpub, 2017, pp.\u00a012\u201324.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4dcf6845535d\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/codex/getting-started-using-redux-4dcf6845535d\">Getting Started Using Redux</a> was originally published in <a href=\"https://medium.com/codex\">CodeX</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
      "enclosure": {},
      "categories": [
        "javascript",
        "redux",
        "react-redux",
        "reactjs",
        "code-newbie"
      ]
    },
    {
      "title": "The UseEffect() Hook",
      "pubDate": "2021-07-29 01:45:05",
      "link": "https://medium.com/codex/the-useeffect-hook-261b0cafaf1e?source=rss-be00f566a88f------2",
      "guid": "https://medium.com/p/261b0cafaf1e",
      "author": "Oscar Luna",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*BOr3jQIpiGcTuMwL",
      "description": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*BOr3jQIpiGcTuMwL\"><figcaption>Photo by <a href=\"https://unsplash.com/@flowforfrank?utm_source=medium&amp;utm_medium=referral\">Ferenc Almasi</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>How to implement React.useEffect() when dealing with side-effects in our\u00a0code</h4>\n<p>Hello! Today I want to switch things up a bit and go over one of the more confusing React Hooks. That\u2019s right, readers, I\u2019m talking about <em>React.useEffect() </em>and its way of dealing with effects that need to run after the DOM is updated. I\u2019m here today to help you see that this hook is actually quite simple to use and its versatility is nothing to be intimidated by. Let\u2019s jump right\u00a0in!</p>\n<h3>React Hooks</h3>\n<p>As we know React released hooks with the release of version 16.8 and had the developer community wondering if class-based components would become a thing of the past. Function-based components now had a way to declare and update state without the need for prototypical inheritance or binding event handlers to a constructor. Obviously, things didn\u2019t turn out that way, but function-based components using hooks remain a solid approach for managing\u00a0state.</p>\n<p>Function-based components may have a means to initialize and update state with the useState hook, but they remain without lifecycle methods exposed to them without the use of another React hook, useEffect\u00a0. The useEffect hook does nothing more than provide a way for our code to handle side-effects after the DOM is updated. The React.js documentation provides a comprehensive scenario where useEffect can update a value after the DOM had been updated. In the example, useEffect takes the place of the lifecycle methods componentDidMount and componentDidUpdate, both of which execute on the initial render and subsequent re-renders, respectively. The example below shows a simple implementation of useEffect that both integrates its state to the DOM as well as unsubscribe it from the\u00a0DOM.</p>\n<a href=\"https://medium.com/media/2b42e3651b79ef05991fd5b2d20fe0f1/href\">https://medium.com/media/2b42e3651b79ef05991fd5b2d20fe0f1/href</a><p>The Effect hook in React provides a solution for leveraging side-effects in function-based components, including control of an event handler that will listen for changes in the dependency\u2019s value changing after the initial render. Any changes to a friend\u2019s status after the component\u2019s initial render will trigger useEffect to subscribe to their online status. The example above contains a second argument to it. This empty dependency array passed as a second argument is used so that useEffect will only execute after an initial render, and not during any re-renders.</p>\n<h3>The Dependency Array</h3>\n<p>The dependency array is used to provide a source to listen to that will trigger useEffect when the component renders initially and after any re-renders. Should this value change at a later time, this will lead to a re-render of the component, and the function returned by useEffect will execute to clean up this side effect (in the case of the example above, it will unsubscribe from a friend\u2019s status change). Without this dependency array, useEffect will execute its default behavior, which occurs at every re-render. A lack of a necessary dependency can lead to an infinite loop in our code, so let\u2019s avoid\u00a0that.</p>\n<p>That is all for today! Check below for a list of relevant resources, including some video breakdowns of useEffect and its functionality. Thank you so much for reading! Until next\u00a0time!</p>\n<h3>Sources Cited</h3>\n<blockquote>Larsen, John. <em>React Hooks in Action: With Suspense and Concurrent Mode</em>. 3rd ed., Manning Publications, 2020, pp.\u00a098\u2013110.</blockquote>\n<blockquote>The Net Ninja. \u201cFull React Tutorial #14\u200a\u2014\u200aUseEffect Hook (the Basics).\u201d <em>Youtube</em>, YouTube, 6 Jan. 2021, <a href=\"https://www.youtube.com/watch?v=gv9ugDJ1ynU.\">https://www.youtube.com/watch?v=gv9ugDJ1ynU.</a>\n</blockquote>\n<blockquote>\u2014 -. \u201cFull React Tutorial #15\u200a\u2014\u200aUseEffect Dependencies.\u201d <em>Youtube</em>, YouTube, 7 Jan. 2021, <a href=\"https://www.youtube.com/watch?v=jQc_bTFZ5_I.\">https://www.youtube.com/watch?v=jQc_bTFZ5_I.</a>\n</blockquote>\n<blockquote>\u201cUsing the Effect Hook\u200a\u2014\u200aReact.\u201d <em>React\u200a\u2014\u200aA JavaScript Library for Building User Interfaces</em>, <a href=\"https://reactjs.org/docs/hooks-effect.html.\">https://reactjs.org/docs/hooks-effect.html.</a> Accessed 27 July\u00a02021.</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=261b0cafaf1e\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/codex/the-useeffect-hook-261b0cafaf1e\">The UseEffect() Hook</a> was originally published in <a href=\"https://medium.com/codex\">CodeX</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
      "content": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*BOr3jQIpiGcTuMwL\"><figcaption>Photo by <a href=\"https://unsplash.com/@flowforfrank?utm_source=medium&amp;utm_medium=referral\">Ferenc Almasi</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>How to implement React.useEffect() when dealing with side-effects in our\u00a0code</h4>\n<p>Hello! Today I want to switch things up a bit and go over one of the more confusing React Hooks. That\u2019s right, readers, I\u2019m talking about <em>React.useEffect() </em>and its way of dealing with effects that need to run after the DOM is updated. I\u2019m here today to help you see that this hook is actually quite simple to use and its versatility is nothing to be intimidated by. Let\u2019s jump right\u00a0in!</p>\n<h3>React Hooks</h3>\n<p>As we know React released hooks with the release of version 16.8 and had the developer community wondering if class-based components would become a thing of the past. Function-based components now had a way to declare and update state without the need for prototypical inheritance or binding event handlers to a constructor. Obviously, things didn\u2019t turn out that way, but function-based components using hooks remain a solid approach for managing\u00a0state.</p>\n<p>Function-based components may have a means to initialize and update state with the useState hook, but they remain without lifecycle methods exposed to them without the use of another React hook, useEffect\u00a0. The useEffect hook does nothing more than provide a way for our code to handle side-effects after the DOM is updated. The React.js documentation provides a comprehensive scenario where useEffect can update a value after the DOM had been updated. In the example, useEffect takes the place of the lifecycle methods componentDidMount and componentDidUpdate, both of which execute on the initial render and subsequent re-renders, respectively. The example below shows a simple implementation of useEffect that both integrates its state to the DOM as well as unsubscribe it from the\u00a0DOM.</p>\n<a href=\"https://medium.com/media/2b42e3651b79ef05991fd5b2d20fe0f1/href\">https://medium.com/media/2b42e3651b79ef05991fd5b2d20fe0f1/href</a><p>The Effect hook in React provides a solution for leveraging side-effects in function-based components, including control of an event handler that will listen for changes in the dependency\u2019s value changing after the initial render. Any changes to a friend\u2019s status after the component\u2019s initial render will trigger useEffect to subscribe to their online status. The example above contains a second argument to it. This empty dependency array passed as a second argument is used so that useEffect will only execute after an initial render, and not during any re-renders.</p>\n<h3>The Dependency Array</h3>\n<p>The dependency array is used to provide a source to listen to that will trigger useEffect when the component renders initially and after any re-renders. Should this value change at a later time, this will lead to a re-render of the component, and the function returned by useEffect will execute to clean up this side effect (in the case of the example above, it will unsubscribe from a friend\u2019s status change). Without this dependency array, useEffect will execute its default behavior, which occurs at every re-render. A lack of a necessary dependency can lead to an infinite loop in our code, so let\u2019s avoid\u00a0that.</p>\n<p>That is all for today! Check below for a list of relevant resources, including some video breakdowns of useEffect and its functionality. Thank you so much for reading! Until next\u00a0time!</p>\n<h3>Sources Cited</h3>\n<blockquote>Larsen, John. <em>React Hooks in Action: With Suspense and Concurrent Mode</em>. 3rd ed., Manning Publications, 2020, pp.\u00a098\u2013110.</blockquote>\n<blockquote>The Net Ninja. \u201cFull React Tutorial #14\u200a\u2014\u200aUseEffect Hook (the Basics).\u201d <em>Youtube</em>, YouTube, 6 Jan. 2021, <a href=\"https://www.youtube.com/watch?v=gv9ugDJ1ynU.\">https://www.youtube.com/watch?v=gv9ugDJ1ynU.</a>\n</blockquote>\n<blockquote>\u2014 -. \u201cFull React Tutorial #15\u200a\u2014\u200aUseEffect Dependencies.\u201d <em>Youtube</em>, YouTube, 7 Jan. 2021, <a href=\"https://www.youtube.com/watch?v=jQc_bTFZ5_I.\">https://www.youtube.com/watch?v=jQc_bTFZ5_I.</a>\n</blockquote>\n<blockquote>\u201cUsing the Effect Hook\u200a\u2014\u200aReact.\u201d <em>React\u200a\u2014\u200aA JavaScript Library for Building User Interfaces</em>, <a href=\"https://reactjs.org/docs/hooks-effect.html.\">https://reactjs.org/docs/hooks-effect.html.</a> Accessed 27 July\u00a02021.</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=261b0cafaf1e\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/codex/the-useeffect-hook-261b0cafaf1e\">The UseEffect() Hook</a> was originally published in <a href=\"https://medium.com/codex\">CodeX</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
      "enclosure": {},
      "categories": ["react", "hooks", "javascript", "programming", "useeffect"]
    },
    {
      "title": "An Introduction To Webpack",
      "pubDate": "2021-07-22 04:11:49",
      "link": "https://medium.com/codex/an-introduction-to-webpack-5b96caad3f27?source=rss-be00f566a88f------2",
      "guid": "https://medium.com/p/5b96caad3f27",
      "author": "Oscar Luna",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*epzRJEs1l2yRVjYY",
      "description": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*epzRJEs1l2yRVjYY\"><figcaption>Photo by <a href=\"https://unsplash.com/@agk42?utm_source=medium&amp;utm_medium=referral\">Alex Knight</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>Part 2: Configuring Webpack for Development and Production Modes</h4>\n<p>Hello! Welcome to part 2 of this series of posts (if you haven\u2019t read part 1, read it <a href=\"https://medium.com/codex/an-introduction-to-webpack-1f33475fd07b\">here</a>). Last time I broke down the Webpack module and how to define an entry point for our front end code, provide a path for our bundled files, how to compile our non-JavaScript files into readable JavaScript, and plugin properties for any tasks can\u2019t be handled by. This post will focus more on configuring Webpack for production mode and deploying production bundles. For this article I\u2019m going to assume you understand the basics of Webpack configuration including Webpack loaders and plugins, as well as importing third-party modules using NPM. With that said, let\u2019s jump right\u00a0in!</p>\n<h3>Development Vs. Production</h3>\n<p>Webpack leverages our code in development mode by providing source mapping and live reloading/hot module replacement using a local host server. It is used to define when to transition between local code and third party code (loaders and plugins) when optimizing our code. Plugins and loaders handle anything that Webpack can not already achieve with its native code. For example, any module that requires the use of global variables can be handled by <em>imports-loader</em>, which will inject global variables into a module. Or we can use <em>HtmlWebpackPlugin</em> to generate HTML files to serve with our bundled code. If you wish to see what plugins are available, the Webpack documentation provides a <a href=\"https://webpack.js.org/plugins/\">list of available plugins</a>.</p>\n<p>With creating a production build we aim to fulfill the task of minifying our bundles, lightening source maps, and optimization of assets such as image files. Webpack leverages this process by ensuring compilation occurs smoothly and that our code has no errors. Since configuration for Webpack differs between development and production modes in only a few aspects, it\u2019s a good practice to separate differing configurations into their own file. This way we avoid being repetitive with our code. The example below demonstrates an implementation of three files, <em>webpack.config.js</em>, <em>webpack.config.development.js</em>, and <em>webpack.config.production.js</em>. As their namesakes suggest, the latter two files construct dependency graphs in relation to development and production modes, respectively, while the former will contain any common configuration requirements.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/822/1*ApKQkiBU2OO6eNDFqXNWVQ.png\"></figure><p>The development and production mode configurations each use some of the loaders and plugins exclusively, hence the separation of the Webpack module into three separate modules. The first module <em>webpack.config.js </em>will handle defining entry points and an output path as well as any loaders and plugins used in common when configuring for both development and production modes.</p>\n<p>The second\u00a0module <em>webpack.config.development.js </em>will handle creation of a source map that will define the source location of the various <em>chunks</em> in a bundle file that are made from more than one source file. For example, if <em>bundle.a.js</em> is the output of compiling <em>module.a.js</em>, <em>module.b.js</em>, and <em>module.c.js</em>\u00a0into\u00a0one\u00a0file, then our source map needs to be able to indicate which chunks in <em>bundle.a.js</em> are sourced from <em>module.a.js</em>, <em>module.b.js</em>, or <em>module.c.js. </em>The development and production configuration modules also import <em>webpack-merge, </em>which allows us to use the configuration settings from the common Webpack module using the built-in <em>merge() </em>in each environment mode.</p>\n<p>The third module will handle our configuration for production mode. As mentioned for the first two modules, <em>webpack.config.production.js </em>will only define loaders and plugins that it will exclusively use, as well as merge the common configuration from the first\u00a0module.</p>\n<p>That\u2019s all for today! Thank you for reading this second part of my series of posts about the fundamentals of Webpack! Until next\u00a0time!</p>\n<h3>Sources Cited</h3>\n<blockquote>\u201cConfiguration | Webpack.\u201d <em>Webpack</em>, <a href=\"https://webpack.js.org/configuration/\">https://webpack.js.org/configuration/.</a> Accessed 21 July\u00a02021.</blockquote>\n<blockquote>Owens, Tom. <em>Webpack 5 Up and Running</em>. 1st ed., Packt Publishing, 2020, pp. 80\u201394,\u00a0118\u201324.</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5b96caad3f27\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/codex/an-introduction-to-webpack-5b96caad3f27\">An Introduction To Webpack</a> was originally published in <a href=\"https://medium.com/codex\">CodeX</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
      "content": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*epzRJEs1l2yRVjYY\"><figcaption>Photo by <a href=\"https://unsplash.com/@agk42?utm_source=medium&amp;utm_medium=referral\">Alex Knight</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>Part 2: Configuring Webpack for Development and Production Modes</h4>\n<p>Hello! Welcome to part 2 of this series of posts (if you haven\u2019t read part 1, read it <a href=\"https://medium.com/codex/an-introduction-to-webpack-1f33475fd07b\">here</a>). Last time I broke down the Webpack module and how to define an entry point for our front end code, provide a path for our bundled files, how to compile our non-JavaScript files into readable JavaScript, and plugin properties for any tasks can\u2019t be handled by. This post will focus more on configuring Webpack for production mode and deploying production bundles. For this article I\u2019m going to assume you understand the basics of Webpack configuration including Webpack loaders and plugins, as well as importing third-party modules using NPM. With that said, let\u2019s jump right\u00a0in!</p>\n<h3>Development Vs. Production</h3>\n<p>Webpack leverages our code in development mode by providing source mapping and live reloading/hot module replacement using a local host server. It is used to define when to transition between local code and third party code (loaders and plugins) when optimizing our code. Plugins and loaders handle anything that Webpack can not already achieve with its native code. For example, any module that requires the use of global variables can be handled by <em>imports-loader</em>, which will inject global variables into a module. Or we can use <em>HtmlWebpackPlugin</em> to generate HTML files to serve with our bundled code. If you wish to see what plugins are available, the Webpack documentation provides a <a href=\"https://webpack.js.org/plugins/\">list of available plugins</a>.</p>\n<p>With creating a production build we aim to fulfill the task of minifying our bundles, lightening source maps, and optimization of assets such as image files. Webpack leverages this process by ensuring compilation occurs smoothly and that our code has no errors. Since configuration for Webpack differs between development and production modes in only a few aspects, it\u2019s a good practice to separate differing configurations into their own file. This way we avoid being repetitive with our code. The example below demonstrates an implementation of three files, <em>webpack.config.js</em>, <em>webpack.config.development.js</em>, and <em>webpack.config.production.js</em>. As their namesakes suggest, the latter two files construct dependency graphs in relation to development and production modes, respectively, while the former will contain any common configuration requirements.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/822/1*ApKQkiBU2OO6eNDFqXNWVQ.png\"></figure><p>The development and production mode configurations each use some of the loaders and plugins exclusively, hence the separation of the Webpack module into three separate modules. The first module <em>webpack.config.js </em>will handle defining entry points and an output path as well as any loaders and plugins used in common when configuring for both development and production modes.</p>\n<p>The second\u00a0module <em>webpack.config.development.js </em>will handle creation of a source map that will define the source location of the various <em>chunks</em> in a bundle file that are made from more than one source file. For example, if <em>bundle.a.js</em> is the output of compiling <em>module.a.js</em>, <em>module.b.js</em>, and <em>module.c.js</em>\u00a0into\u00a0one\u00a0file, then our source map needs to be able to indicate which chunks in <em>bundle.a.js</em> are sourced from <em>module.a.js</em>, <em>module.b.js</em>, or <em>module.c.js. </em>The development and production configuration modules also import <em>webpack-merge, </em>which allows us to use the configuration settings from the common Webpack module using the built-in <em>merge() </em>in each environment mode.</p>\n<p>The third module will handle our configuration for production mode. As mentioned for the first two modules, <em>webpack.config.production.js </em>will only define loaders and plugins that it will exclusively use, as well as merge the common configuration from the first\u00a0module.</p>\n<p>That\u2019s all for today! Thank you for reading this second part of my series of posts about the fundamentals of Webpack! Until next\u00a0time!</p>\n<h3>Sources Cited</h3>\n<blockquote>\u201cConfiguration | Webpack.\u201d <em>Webpack</em>, <a href=\"https://webpack.js.org/configuration/\">https://webpack.js.org/configuration/.</a> Accessed 21 July\u00a02021.</blockquote>\n<blockquote>Owens, Tom. <em>Webpack 5 Up and Running</em>. 1st ed., Packt Publishing, 2020, pp. 80\u201394,\u00a0118\u201324.</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5b96caad3f27\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/codex/an-introduction-to-webpack-5b96caad3f27\">An Introduction To Webpack</a> was originally published in <a href=\"https://medium.com/codex\">CodeX</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
      "enclosure": {},
      "categories": ["webpack-5", "webpack", "code-newbie", "javascript"]
    },
    {
      "title": "An Introduction to Webpack",
      "pubDate": "2021-07-11 02:58:18",
      "link": "https://medium.com/codex/an-introduction-to-webpack-1f33475fd07b?source=rss-be00f566a88f------2",
      "guid": "https://medium.com/p/1f33475fd07b",
      "author": "Oscar Luna",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*_lUrfmO0sERKe9ue",
      "description": "\n<h4>How to optimize our JavaScript code for production using a module\u00a0bundler</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*_lUrfmO0sERKe9ue\"><figcaption>Photo by <a href=\"https://unsplash.com/@oskaryil?utm_source=medium&amp;utm_medium=referral\">Oskar Yildiz</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Hello! This is part one of a series of articles covering the basics of Webpack. I will go over the basic use of the Webpack compiler and how to leverage code optimization through the creation of<em> bundles</em>. This step is crucial in the web development process as it is the point where we define our dependency graphs, entry points for our files, destinations for generated chunk files, plugins for modularization of non-JavaScript, and non-JSON files like CSS or even image files, and more. Okay, enough dilly-dallying, let\u2019s jump right\u00a0in!</p>\n<h3>Webpack Configuration</h3>\n<p>Webpack is a JavaScript compiler that converts JS into modularized <em>bundles </em>in preparation for production. We can use Webpack to define <em>entry points</em> for our frontend code as well as convert other files to readable JavaScript and provide the bundle\u2019s path as an output. The example below is a basic implementation of a `<em>config`</em> object that defines an entry point at `<em>index.js`</em> in the `<em>src`</em> folder of a web application.</p>\n<a href=\"https://medium.com/media/93cda64fb20cbe653b18dc2f25c7fcc9/href\">https://medium.com/media/93cda64fb20cbe653b18dc2f25c7fcc9/href</a><p>It isn\u2019t required that the entry property in our webpack configuration file be an object. The syntax in the example to the left is primarily used when defining more than one entry point. We can also define the path to the entry point as the value of the entry property if it\u2019s the only\u00a0one.</p>\n<p>When it comes to our config module\u2019s `<em>output`, </em>despite an entry\u2019s capability to hold multiple points of entry, only one output path can be defined. The output property is used to define a destination path for the newly created JavaScript bundle files as well as a file name. In other words, it defines how and where to store our compiled code. We can implement this using the Node.js `<em>path`\u00a0</em>module.</p>\n<p>The example below imports the path module as well as store the created `<em>bundle.js` </em>file to the `<em>dist`</em>\u00a0folder:</p>\n<a href=\"https://medium.com/media/e1ece4703d70994d8c25fd4e08d6ce2d/href\">https://medium.com/media/e1ece4703d70994d8c25fd4e08d6ce2d/href</a><p>Here we import the path module which will help define a file path for our compiled code. Using the `resolve()`<em> </em>method exposed by the imported module, we assign the bundle file to the current directory using the `__dirname` global object as well as a name for the file by passing a string of the file\u2019s absolute path to `resolve()<em>`</em>.</p>\n<p>When building our Webpack compiler we must also define any loaders and plugins that are required. The loader property is used to convert any non-JavaScript files (TypeScript, JSON, CSS, etc.) into readable, compiled JavaScript. A different loader is used per file type (i.e. `css-loader` is used for CSS files, style-loader can handle SCSS, file-loader for handling JSON data, etc.). They are converted into modules that are added to a dependency graph generated by Webpack. The example below shows a simple implementation of the loader property:</p>\n<a href=\"https://medium.com/media/25586fd1b2d7a6a678799863e84f4bcb/href\">https://medium.com/media/25586fd1b2d7a6a678799863e84f4bcb/href</a><p>The <em>module</em> object in the example above defines the loaders to use to convert code into JavaScript modules. These are executed from right to left, or rather, from the bottom to the top, with the last loader expected to output a JavaScript code. As you can see, different file types require different loaders. You can even use `<em>module.rules`</em> to chain multiple loaders to a single file-type if\u00a0needed:</p>\n<a href=\"https://medium.com/media/17b06346386c114df5c447be2a6399a5/href\">https://medium.com/media/17b06346386c114df5c447be2a6399a5/href</a><p>Apart from an input, output, and loaders, webpack also uses <em>plugins </em>for a wide range of functionalities that aren\u2019t already doable by a loader. It can log the compiling of our code to the console, it can build an HTML file along with your bundle, or store environment variables to call with `<em>process.env`, </em>write commented-out banners at the top of your bundle files, etc. The example below demonstrates a configuration file where we import the `HTMLWebpack` plugin via\u00a0NPM:</p>\n<a href=\"https://medium.com/media/0e2683716b974f67a1f7013d4cb5f01d/href\">https://medium.com/media/0e2683716b974f67a1f7013d4cb5f01d/href</a><p>That's it for part 1! Stay tuned for part 2 where I will dive deeper into webpack plugins and explore the variety of tasks that can be executed using webpack. Until next\u00a0time!</p>\n<p>Ps. The Webpack docs provide a list of all plugins available <a href=\"https://webpack.js.org/plugins/\">here</a>.</p>\n<h4>Sources Cited</h4>\n<blockquote>\u201cWebpack.\u201d <em>Webpack</em>, <a href=\"http://webpack.js.org./\">http://webpack.js.org.</a> Accessed 10 July\u00a02021.</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1f33475fd07b\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/codex/an-introduction-to-webpack-1f33475fd07b\">An Introduction to Webpack</a> was originally published in <a href=\"https://medium.com/codex\">CodeX</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
      "content": "\n<h4>How to optimize our JavaScript code for production using a module\u00a0bundler</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*_lUrfmO0sERKe9ue\"><figcaption>Photo by <a href=\"https://unsplash.com/@oskaryil?utm_source=medium&amp;utm_medium=referral\">Oskar Yildiz</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Hello! This is part one of a series of articles covering the basics of Webpack. I will go over the basic use of the Webpack compiler and how to leverage code optimization through the creation of<em> bundles</em>. This step is crucial in the web development process as it is the point where we define our dependency graphs, entry points for our files, destinations for generated chunk files, plugins for modularization of non-JavaScript, and non-JSON files like CSS or even image files, and more. Okay, enough dilly-dallying, let\u2019s jump right\u00a0in!</p>\n<h3>Webpack Configuration</h3>\n<p>Webpack is a JavaScript compiler that converts JS into modularized <em>bundles </em>in preparation for production. We can use Webpack to define <em>entry points</em> for our frontend code as well as convert other files to readable JavaScript and provide the bundle\u2019s path as an output. The example below is a basic implementation of a `<em>config`</em> object that defines an entry point at `<em>index.js`</em> in the `<em>src`</em> folder of a web application.</p>\n<a href=\"https://medium.com/media/93cda64fb20cbe653b18dc2f25c7fcc9/href\">https://medium.com/media/93cda64fb20cbe653b18dc2f25c7fcc9/href</a><p>It isn\u2019t required that the entry property in our webpack configuration file be an object. The syntax in the example to the left is primarily used when defining more than one entry point. We can also define the path to the entry point as the value of the entry property if it\u2019s the only\u00a0one.</p>\n<p>When it comes to our config module\u2019s `<em>output`, </em>despite an entry\u2019s capability to hold multiple points of entry, only one output path can be defined. The output property is used to define a destination path for the newly created JavaScript bundle files as well as a file name. In other words, it defines how and where to store our compiled code. We can implement this using the Node.js `<em>path`\u00a0</em>module.</p>\n<p>The example below imports the path module as well as store the created `<em>bundle.js` </em>file to the `<em>dist`</em>\u00a0folder:</p>\n<a href=\"https://medium.com/media/e1ece4703d70994d8c25fd4e08d6ce2d/href\">https://medium.com/media/e1ece4703d70994d8c25fd4e08d6ce2d/href</a><p>Here we import the path module which will help define a file path for our compiled code. Using the `resolve()`<em> </em>method exposed by the imported module, we assign the bundle file to the current directory using the `__dirname` global object as well as a name for the file by passing a string of the file\u2019s absolute path to `resolve()<em>`</em>.</p>\n<p>When building our Webpack compiler we must also define any loaders and plugins that are required. The loader property is used to convert any non-JavaScript files (TypeScript, JSON, CSS, etc.) into readable, compiled JavaScript. A different loader is used per file type (i.e. `css-loader` is used for CSS files, style-loader can handle SCSS, file-loader for handling JSON data, etc.). They are converted into modules that are added to a dependency graph generated by Webpack. The example below shows a simple implementation of the loader property:</p>\n<a href=\"https://medium.com/media/25586fd1b2d7a6a678799863e84f4bcb/href\">https://medium.com/media/25586fd1b2d7a6a678799863e84f4bcb/href</a><p>The <em>module</em> object in the example above defines the loaders to use to convert code into JavaScript modules. These are executed from right to left, or rather, from the bottom to the top, with the last loader expected to output a JavaScript code. As you can see, different file types require different loaders. You can even use `<em>module.rules`</em> to chain multiple loaders to a single file-type if\u00a0needed:</p>\n<a href=\"https://medium.com/media/17b06346386c114df5c447be2a6399a5/href\">https://medium.com/media/17b06346386c114df5c447be2a6399a5/href</a><p>Apart from an input, output, and loaders, webpack also uses <em>plugins </em>for a wide range of functionalities that aren\u2019t already doable by a loader. It can log the compiling of our code to the console, it can build an HTML file along with your bundle, or store environment variables to call with `<em>process.env`, </em>write commented-out banners at the top of your bundle files, etc. The example below demonstrates a configuration file where we import the `HTMLWebpack` plugin via\u00a0NPM:</p>\n<a href=\"https://medium.com/media/0e2683716b974f67a1f7013d4cb5f01d/href\">https://medium.com/media/0e2683716b974f67a1f7013d4cb5f01d/href</a><p>That's it for part 1! Stay tuned for part 2 where I will dive deeper into webpack plugins and explore the variety of tasks that can be executed using webpack. Until next\u00a0time!</p>\n<p>Ps. The Webpack docs provide a list of all plugins available <a href=\"https://webpack.js.org/plugins/\">here</a>.</p>\n<h4>Sources Cited</h4>\n<blockquote>\u201cWebpack.\u201d <em>Webpack</em>, <a href=\"http://webpack.js.org./\">http://webpack.js.org.</a> Accessed 10 July\u00a02021.</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1f33475fd07b\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/codex/an-introduction-to-webpack-1f33475fd07b\">An Introduction to Webpack</a> was originally published in <a href=\"https://medium.com/codex\">CodeX</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
      "enclosure": {},
      "categories": [
        "code-newbie",
        "webpack-5",
        "webpack",
        "production",
        "javascript"
      ]
    },
    {
      "title": "On APIs and REST Architecture (Part 2)",
      "pubDate": "2021-07-04 23:30:05",
      "link": "https://medium.com/@oaluna/on-apis-and-rest-architecture-part-2-5b5d5a9fa603?source=rss-be00f566a88f------2",
      "guid": "https://medium.com/p/5b5d5a9fa603",
      "author": "Oscar Luna",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*tRxDziY_sfEJ5uDd",
      "description": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*tRxDziY_sfEJ5uDd\"><figcaption>Photo by <a href=\"https://unsplash.com/@agk42?utm_source=medium&amp;utm_medium=referral\">Alex Knight</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>Leveraging client-server communications using CRUD operations</h4>\n<p>Hello! Last time I reviewed some fundamental concepts of HTTP, REST architecture and how client-server communications are leveraged\u00a0through\u00a0APIs. If you missed part one of this series <a href=\"https://medium.com/codex/on-apis-and-rest-architecture-part-1-f64449a2f177\">you can read the first part\u00a0here.</a></p>\n<h4>Idempotence</h4>\n<p>HTTP verbs are expected to be idempotent in implementation, which is to say, multiple inputs to a method will return the same expected output without unintended side effects. This particularly applies to get(), put(), and delete() which do not alter the state of the resource. A get() request simply fetches a resource to be read, and thus doesn\u2019t alter the state of the resource at all. the example below is a rudimentary demonstration of get()\u2019s idempotence:</p>\n<a href=\"https://medium.com/media/0ac768fa60240576b0e33f89d399b30c/href\">https://medium.com/media/0ac768fa60240576b0e33f89d399b30c/href</a><p>In the case of put() and delete(), despite their roles of updating and deleting resources, respectively, maintain idempotence by maintaining the same expected output, though the result differs. for instance, a resource when updated or deleted are given an identifier to consult with within the future. <br>For data to be stored, a sequence of operations must execute. A storage location must be created and must have memory allocated for it. It must be readable and updateable, and must be initialized with some data. These semantics of storage apply for various programming contexts associated with persistent data (HTTP requests, UI, binary files, etc.). In web development these semantics are handled with HTTP verbs, which also satisfy REST guidelines.</p>\n<a href=\"https://medium.com/media/88f041a1573f91eb6341283c55ab2fc4/href\">https://medium.com/media/88f041a1573f91eb6341283c55ab2fc4/href</a><h4>Server-side CRUD</h4>\n<p>The four functions of persistent storage (Create, Read, Update, Delete) are applied when interacting with RESTful APIs to map HTTP verbs put(), get(), post(), and delete(). <a href=\"https://carbon.now.sh)the/\">The</a> example above demonstrates an easy implementation of CRUD operations and the way they\u2019re leveraged using the router module in Node.js. we will see how the implemented get() method remains idempotent by reading a resource without altering it. Post() and put() update the state, but they\u2019re also idempotent in that the nature of the change to the resource state is what remains the same no matter the amount of similar inputs. Adding a comment to a comment section will always add that single comment, as will deleting one account through delete() will always delete that very same account. Various APIs expose similar methods for executing the same CRUD operations (i.e. Axios, Node\u2019s HTTP module,\u00a0etc.).</p>\n<p>Thank you for reading! I\u2019m going to keep this one short in preparation for my next few posts where I\u2019ll be covering upcoming front-end technology releases (namely Next 11, React 18). Until next\u00a0time!</p>\n<h4>Sources Cited</h4>\n<blockquote>Contributors to Wikimedia projects. \u201cCreate, Read, Update and Delete\u200a\u2014\u200aWikipedia.\u201d <em>Wikipedia, the Free Encyclopedia</em>, Wikimedia Foundation, Inc., 3 Aug. 2003, <a href=\"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete.\">https://en.wikipedia.org/wiki/Create,_read,_update_and_delete.</a>\n</blockquote>\n<blockquote>\u201cHTTP | Node.Js V16.4.1 Documentation.\u201d <em>Node.Js</em>, <a href=\"https://nodejs.org/api/http.html#http_http.\">https://nodejs.org/api/http.html#http_http.</a> Accessed 2 July\u00a02021.</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5b5d5a9fa603\" width=\"1\" height=\"1\" alt=\"\">\n",
      "content": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*tRxDziY_sfEJ5uDd\"><figcaption>Photo by <a href=\"https://unsplash.com/@agk42?utm_source=medium&amp;utm_medium=referral\">Alex Knight</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>Leveraging client-server communications using CRUD operations</h4>\n<p>Hello! Last time I reviewed some fundamental concepts of HTTP, REST architecture and how client-server communications are leveraged\u00a0through\u00a0APIs. If you missed part one of this series <a href=\"https://medium.com/codex/on-apis-and-rest-architecture-part-1-f64449a2f177\">you can read the first part\u00a0here.</a></p>\n<h4>Idempotence</h4>\n<p>HTTP verbs are expected to be idempotent in implementation, which is to say, multiple inputs to a method will return the same expected output without unintended side effects. This particularly applies to get(), put(), and delete() which do not alter the state of the resource. A get() request simply fetches a resource to be read, and thus doesn\u2019t alter the state of the resource at all. the example below is a rudimentary demonstration of get()\u2019s idempotence:</p>\n<a href=\"https://medium.com/media/0ac768fa60240576b0e33f89d399b30c/href\">https://medium.com/media/0ac768fa60240576b0e33f89d399b30c/href</a><p>In the case of put() and delete(), despite their roles of updating and deleting resources, respectively, maintain idempotence by maintaining the same expected output, though the result differs. for instance, a resource when updated or deleted are given an identifier to consult with within the future. <br>For data to be stored, a sequence of operations must execute. A storage location must be created and must have memory allocated for it. It must be readable and updateable, and must be initialized with some data. These semantics of storage apply for various programming contexts associated with persistent data (HTTP requests, UI, binary files, etc.). In web development these semantics are handled with HTTP verbs, which also satisfy REST guidelines.</p>\n<a href=\"https://medium.com/media/88f041a1573f91eb6341283c55ab2fc4/href\">https://medium.com/media/88f041a1573f91eb6341283c55ab2fc4/href</a><h4>Server-side CRUD</h4>\n<p>The four functions of persistent storage (Create, Read, Update, Delete) are applied when interacting with RESTful APIs to map HTTP verbs put(), get(), post(), and delete(). <a href=\"https://carbon.now.sh)the/\">The</a> example above demonstrates an easy implementation of CRUD operations and the way they\u2019re leveraged using the router module in Node.js. we will see how the implemented get() method remains idempotent by reading a resource without altering it. Post() and put() update the state, but they\u2019re also idempotent in that the nature of the change to the resource state is what remains the same no matter the amount of similar inputs. Adding a comment to a comment section will always add that single comment, as will deleting one account through delete() will always delete that very same account. Various APIs expose similar methods for executing the same CRUD operations (i.e. Axios, Node\u2019s HTTP module,\u00a0etc.).</p>\n<p>Thank you for reading! I\u2019m going to keep this one short in preparation for my next few posts where I\u2019ll be covering upcoming front-end technology releases (namely Next 11, React 18). Until next\u00a0time!</p>\n<h4>Sources Cited</h4>\n<blockquote>Contributors to Wikimedia projects. \u201cCreate, Read, Update and Delete\u200a\u2014\u200aWikipedia.\u201d <em>Wikipedia, the Free Encyclopedia</em>, Wikimedia Foundation, Inc., 3 Aug. 2003, <a href=\"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete.\">https://en.wikipedia.org/wiki/Create,_read,_update_and_delete.</a>\n</blockquote>\n<blockquote>\u201cHTTP | Node.Js V16.4.1 Documentation.\u201d <em>Node.Js</em>, <a href=\"https://nodejs.org/api/http.html#http_http.\">https://nodejs.org/api/http.html#http_http.</a> Accessed 2 July\u00a02021.</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5b5d5a9fa603\" width=\"1\" height=\"1\" alt=\"\">\n",
      "enclosure": {},
      "categories": [
        "nodejs",
        "rest-api",
        "crud",
        "code-newbie",
        "client-server"
      ]
    },
    {
      "title": "On APIs and REST Architecture (Part 1)",
      "pubDate": "2021-06-30 00:52:27",
      "link": "https://medium.com/codex/on-apis-and-rest-architecture-part-1-f64449a2f177?source=rss-be00f566a88f------2",
      "guid": "https://medium.com/p/f64449a2f177",
      "author": "Oscar Luna",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*r6xaW_gTkQH0fYTX",
      "description": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*r6xaW_gTkQH0fYTX\"><figcaption>Photo by <a href=\"https://unsplash.com/@rutwik_kulkarni?utm_source=medium&amp;utm_medium=referral\">Rutwik Kulkarni</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>A introduction to client-server interactions in JavaScript</h4>\n<p>Hello! Today I am going to go over client-server interactions and how we can use APIs to interact with third-party software, including how to implement APIS of our own when writing our code using JavaScript. This subject is content-heavy, and for brevity\u2019s sake, I won\u2019t dive too deeply into any one concept. This article is an abstract of sorts on the subject, and not suited for those seeking to learn the fundamentals of server-side interactions in depth. I recommend that you have a basic understanding of APIs and how they are used to leverage interaction between client-side software and server-side software following HTTP protocol in web applications, including fundamentals of REST architecture and what makes a web API RESTful. However, if you would like to learn about this topic more in-depth, I have provided links to various resources in the bibliography at the end of this article. With that said, let\u2019s dive right\u00a0in!</p>\n<h3>HTTP and\u00a0APIs</h3>\n<p>When communicating to a server from the client (the browser), there is an exchange between the two consisting of data requests and responses containing the requested data using Hypertext Transfer Protocol (HTTP). Using a string representation of a resource\u2019s path, or <em>uniform resource identifier</em> (URI), the client sends requests for resources to a server, specifying values such as credentials and the location of the requested resource. The server in turn verifies the request and provides a response to the HTTP request in the form of a response containing the HTTP status code indicating the status of the request (whether it was accepted, rejected, not found, etc.), and the resources that were requested.</p>\n<h4>HTTP Requests</h4>\n<p>HTTP headers contain information that is useful to the server providing the requested resource or service (i.e. content-type and length, authorization tokens, validation credentials, the location of the resource to fetch, etc.). The request body is an optional part of an HTTP request that contains additional information about the request to fetch resources using built-in methods for manipulating a resource called <em>verbs, </em>such as GET, POST, PUT, or DELETE. These HTTP verbs are part of a set of operations that are predominantly used to create, read, update, and delete data from the server, known as <em>CRUD operations</em>. These operations are implemented by HTTP in the form of <em>post()</em>, <em>get()</em>, <em>push()</em> and <em>delete()</em>, respectively.</p>\n<h4>HTTP Responses</h4>\n<p>The server, once having received an HTTP request, sends a response to the client which also consists of a header and sometimes a body. The response header contains a status line containing the HTTP version, a status code regarding the response itself (success, redirect, client error, server error, etc.), and a message regarding the response status sent to the client. HTTP response headers may also provide any additional info that may not have fit into the response\u2019s status line. The last part of an HTTP response is the response body, which can be defined (i.e. Content-Type and Content-Length) or\u00a0encoded.</p>\n<h4>Web APIs</h4>\n<p>An API (Application Program Interface) is an abstraction of interaction with third-party software (in the case of web APIs, the client and the server). Web APIs are a contract of sorts that defines exposed methods from said software that are used to leverage the use of their <em>interface</em>, objects that allow interaction with otherwise inaccessible resources. The functionality provided by APIs ranges from cross-browser compatibility to CRUD operations and beyond. Given that so many different implementations of software exist on the web, APIs provide a consistent way to make requests to any third-party software available to a client. For example, one of the more commonly known APIs is the Fetch API, which exposes an interface for making requests. The example below demonstrates how to write a request using the Fetch\u00a0API:</p>\n<a href=\"https://medium.com/media/3d70ca14182cca3cb72af8cc4276a182/href\">https://medium.com/media/3d70ca14182cca3cb72af8cc4276a182/href</a><p>The Fetch API provides a global <em>fetch() </em>method for asynchronous fetching of third-party resources. In the simple example above, the fetch() method isn\u2019t receiving a string of the path to a desired resource, and returns a promise containing the response, along with instructions to run with the received data (the example above logs\u00a0it).</p>\n<h4>Representational State Transfer\u00a0(REST)</h4>\n<p>Most APIs provide built-in functionalities that are implemented to be hosted locally or accessed dynamically. Locally hosted APIs in particular use locally hosted methods to leverage client-server interactions using a set of architectural guidelines known as <em>representational state transfer</em> or REST. This abstraction of implementations consists of a set of functionalities that an API should emphasize, including:</p>\n<ul>\n<li>The scalability of interactions between components</li>\n<li>Independent deployment of components</li>\n<li>Uniform interfaces that allow for cross-browser compatibility</li>\n<li>Creation of layered architectures to facilitate cached components to reduce user-perceived latency and enforce\u00a0security</li>\n<li>Encapsulate legacy\u00a0systems</li>\n</ul>\n<p>Besides these guidelines REST also defines six constraints that must be met when interacting with a\u00a0server:</p>\n<ul>\n<li>\n<em>Client/Server interaction</em>: A RESTful API will be created focusing on interactions between a server and a client. Tasks must be partitioned between providers of a resource for a service(s) and requesters. For example, we can use HTTP from the client side to send a request to the server using an HTTP verb to indicate the type of request, and the server in turn will provide an appropriate response.</li>\n<li>\n<em>Stateless Representation</em>: The server will not store any request data. All data will be stored in the client (i.e. session\u00a0tokens).</li>\n<li>\n<em>Caching</em>: A RESTful API will provide a shared cache between the client and the\u00a0server.</li>\n<li>\n<em>Uniform Interface</em>: RESTful APIs will provide operations for manipulating data, usually formatted in JSON or\u00a0XML.</li>\n<li>\n<em>Layered Systems</em>: Access to a RESTful API will be leveraged through verification provided in the HTTP request\u2019s header properties. The header object will contain key/value pairs to provide helpful information for the server, such as an authentication token, an API key, content type and length, HTTP verb (Get, Post, Put, Delete),\u00a0etc.</li>\n<li>\n<em>Code On Demand</em>: A server will provide extensible functionality to a client prior to a client sending any HTTP requests in the form of built-in methods and reserved keywords.</li>\n</ul>\n<p>Some of the better-known APIs include the Fetch API, the filesystem API, etc. Despite the different functionalities exposed to the client, REST recommends these guidelines to optimize the interactions between client and\u00a0server.</p>\n<p>That\u2019s all for now folks! In the next post of this series I will discuss CRUD operations and their role in client-server interactions. Until next\u00a0time!</p>\n<h4>Sources Cited</h4>\n<blockquote>\n<em>FreeCodeCamp.org. </em>\u201cAPIs for Beginners\u200a\u2014\u200aHow to Use an API (Full Course / Tutorial).\u201d<em> YouTube, YouTube, 17 Dec. 2019, </em><a href=\"https://www.youtube.com/watch?v=GZvSYJDk-us.\"><em>https://www.youtube.com/watch?v=GZvSYJDk-us.</em></a>\n</blockquote>\n<blockquote>\n<em>Wikipedia contributors, </em>\u201cRepresentational state transfer,\u201d<em> Wikipedia, The Free Encyclopedia, </em><a href=\"https://en.wikipedia.org/w/index.php?title=Representational_state_transfer&amp;oldid=1030195274\"><em>https://en.wikipedia.org/w/index.php?title=Representational_state_transfer&amp;oldid=1030195274</em></a><em> (accessed June 27,\u00a02021).</em>\n</blockquote>\n<blockquote>\n<em>Mozilla Developer Network. </em>\u201cHTTP | MDN.\u201d MDN Web Docs\u201d,<em> </em><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP.\"><em>https://developer.mozilla.org/en-US/docs/Web/HTTP.</em></a><em> Accessed 27 June\u00a02021.</em>\n</blockquote>\n<blockquote>\u201cA Typical HTTP Session\u200a\u2014\u200aHTTP | MDN.\u201d<em> MDN Web Docs, </em><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Session.\"><em>https://developer.mozilla.org/en-US/docs/Web/HTTP/Session.</em></a><em> Accessed 29 June\u00a02021.</em>\n</blockquote>\n<blockquote>\n<em>Contributors to Wikimedia projects. </em>\u201cAPI\u200a\u2014\u200aWikipedia.\u201d <em>Wikipedia, the Free Encyclopedia, Wikimedia Foundation, Inc., 30 July 2001, </em><a href=\"https://en.wikipedia.org/wiki/API.\"><em>https://en.wikipedia.org/wiki/API.</em></a>\n</blockquote>\n<blockquote>\n<em>Contributors to Wikimedia projects. \u201c</em>Interface (Computing)\u200a\u2014\u200aWikipedia.\u201d<em> Wikipedia, the Free Encyclopedia, Wikimedia Foundation, Inc., 26 Apr. 2004, </em><a href=\"https://en.wikipedia.org/wiki/Interface_(computing)#Software_interfaces.\"><em>https://en.wikipedia.org/wiki/Interface_(computing)#Software_interfaces.</em></a>\n</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f64449a2f177\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/codex/on-apis-and-rest-architecture-part-1-f64449a2f177\">On APIs and REST Architecture (Part 1)</a> was originally published in <a href=\"https://medium.com/codex\">CodeX</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
      "content": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*r6xaW_gTkQH0fYTX\"><figcaption>Photo by <a href=\"https://unsplash.com/@rutwik_kulkarni?utm_source=medium&amp;utm_medium=referral\">Rutwik Kulkarni</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>A introduction to client-server interactions in JavaScript</h4>\n<p>Hello! Today I am going to go over client-server interactions and how we can use APIs to interact with third-party software, including how to implement APIS of our own when writing our code using JavaScript. This subject is content-heavy, and for brevity\u2019s sake, I won\u2019t dive too deeply into any one concept. This article is an abstract of sorts on the subject, and not suited for those seeking to learn the fundamentals of server-side interactions in depth. I recommend that you have a basic understanding of APIs and how they are used to leverage interaction between client-side software and server-side software following HTTP protocol in web applications, including fundamentals of REST architecture and what makes a web API RESTful. However, if you would like to learn about this topic more in-depth, I have provided links to various resources in the bibliography at the end of this article. With that said, let\u2019s dive right\u00a0in!</p>\n<h3>HTTP and\u00a0APIs</h3>\n<p>When communicating to a server from the client (the browser), there is an exchange between the two consisting of data requests and responses containing the requested data using Hypertext Transfer Protocol (HTTP). Using a string representation of a resource\u2019s path, or <em>uniform resource identifier</em> (URI), the client sends requests for resources to a server, specifying values such as credentials and the location of the requested resource. The server in turn verifies the request and provides a response to the HTTP request in the form of a response containing the HTTP status code indicating the status of the request (whether it was accepted, rejected, not found, etc.), and the resources that were requested.</p>\n<h4>HTTP Requests</h4>\n<p>HTTP headers contain information that is useful to the server providing the requested resource or service (i.e. content-type and length, authorization tokens, validation credentials, the location of the resource to fetch, etc.). The request body is an optional part of an HTTP request that contains additional information about the request to fetch resources using built-in methods for manipulating a resource called <em>verbs, </em>such as GET, POST, PUT, or DELETE. These HTTP verbs are part of a set of operations that are predominantly used to create, read, update, and delete data from the server, known as <em>CRUD operations</em>. These operations are implemented by HTTP in the form of <em>post()</em>, <em>get()</em>, <em>push()</em> and <em>delete()</em>, respectively.</p>\n<h4>HTTP Responses</h4>\n<p>The server, once having received an HTTP request, sends a response to the client which also consists of a header and sometimes a body. The response header contains a status line containing the HTTP version, a status code regarding the response itself (success, redirect, client error, server error, etc.), and a message regarding the response status sent to the client. HTTP response headers may also provide any additional info that may not have fit into the response\u2019s status line. The last part of an HTTP response is the response body, which can be defined (i.e. Content-Type and Content-Length) or\u00a0encoded.</p>\n<h4>Web APIs</h4>\n<p>An API (Application Program Interface) is an abstraction of interaction with third-party software (in the case of web APIs, the client and the server). Web APIs are a contract of sorts that defines exposed methods from said software that are used to leverage the use of their <em>interface</em>, objects that allow interaction with otherwise inaccessible resources. The functionality provided by APIs ranges from cross-browser compatibility to CRUD operations and beyond. Given that so many different implementations of software exist on the web, APIs provide a consistent way to make requests to any third-party software available to a client. For example, one of the more commonly known APIs is the Fetch API, which exposes an interface for making requests. The example below demonstrates how to write a request using the Fetch\u00a0API:</p>\n<a href=\"https://medium.com/media/3d70ca14182cca3cb72af8cc4276a182/href\">https://medium.com/media/3d70ca14182cca3cb72af8cc4276a182/href</a><p>The Fetch API provides a global <em>fetch() </em>method for asynchronous fetching of third-party resources. In the simple example above, the fetch() method isn\u2019t receiving a string of the path to a desired resource, and returns a promise containing the response, along with instructions to run with the received data (the example above logs\u00a0it).</p>\n<h4>Representational State Transfer\u00a0(REST)</h4>\n<p>Most APIs provide built-in functionalities that are implemented to be hosted locally or accessed dynamically. Locally hosted APIs in particular use locally hosted methods to leverage client-server interactions using a set of architectural guidelines known as <em>representational state transfer</em> or REST. This abstraction of implementations consists of a set of functionalities that an API should emphasize, including:</p>\n<ul>\n<li>The scalability of interactions between components</li>\n<li>Independent deployment of components</li>\n<li>Uniform interfaces that allow for cross-browser compatibility</li>\n<li>Creation of layered architectures to facilitate cached components to reduce user-perceived latency and enforce\u00a0security</li>\n<li>Encapsulate legacy\u00a0systems</li>\n</ul>\n<p>Besides these guidelines REST also defines six constraints that must be met when interacting with a\u00a0server:</p>\n<ul>\n<li>\n<em>Client/Server interaction</em>: A RESTful API will be created focusing on interactions between a server and a client. Tasks must be partitioned between providers of a resource for a service(s) and requesters. For example, we can use HTTP from the client side to send a request to the server using an HTTP verb to indicate the type of request, and the server in turn will provide an appropriate response.</li>\n<li>\n<em>Stateless Representation</em>: The server will not store any request data. All data will be stored in the client (i.e. session\u00a0tokens).</li>\n<li>\n<em>Caching</em>: A RESTful API will provide a shared cache between the client and the\u00a0server.</li>\n<li>\n<em>Uniform Interface</em>: RESTful APIs will provide operations for manipulating data, usually formatted in JSON or\u00a0XML.</li>\n<li>\n<em>Layered Systems</em>: Access to a RESTful API will be leveraged through verification provided in the HTTP request\u2019s header properties. The header object will contain key/value pairs to provide helpful information for the server, such as an authentication token, an API key, content type and length, HTTP verb (Get, Post, Put, Delete),\u00a0etc.</li>\n<li>\n<em>Code On Demand</em>: A server will provide extensible functionality to a client prior to a client sending any HTTP requests in the form of built-in methods and reserved keywords.</li>\n</ul>\n<p>Some of the better-known APIs include the Fetch API, the filesystem API, etc. Despite the different functionalities exposed to the client, REST recommends these guidelines to optimize the interactions between client and\u00a0server.</p>\n<p>That\u2019s all for now folks! In the next post of this series I will discuss CRUD operations and their role in client-server interactions. Until next\u00a0time!</p>\n<h4>Sources Cited</h4>\n<blockquote>\n<em>FreeCodeCamp.org. </em>\u201cAPIs for Beginners\u200a\u2014\u200aHow to Use an API (Full Course / Tutorial).\u201d<em> YouTube, YouTube, 17 Dec. 2019, </em><a href=\"https://www.youtube.com/watch?v=GZvSYJDk-us.\"><em>https://www.youtube.com/watch?v=GZvSYJDk-us.</em></a>\n</blockquote>\n<blockquote>\n<em>Wikipedia contributors, </em>\u201cRepresentational state transfer,\u201d<em> Wikipedia, The Free Encyclopedia, </em><a href=\"https://en.wikipedia.org/w/index.php?title=Representational_state_transfer&amp;oldid=1030195274\"><em>https://en.wikipedia.org/w/index.php?title=Representational_state_transfer&amp;oldid=1030195274</em></a><em> (accessed June 27,\u00a02021).</em>\n</blockquote>\n<blockquote>\n<em>Mozilla Developer Network. </em>\u201cHTTP | MDN.\u201d MDN Web Docs\u201d,<em> </em><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP.\"><em>https://developer.mozilla.org/en-US/docs/Web/HTTP.</em></a><em> Accessed 27 June\u00a02021.</em>\n</blockquote>\n<blockquote>\u201cA Typical HTTP Session\u200a\u2014\u200aHTTP | MDN.\u201d<em> MDN Web Docs, </em><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Session.\"><em>https://developer.mozilla.org/en-US/docs/Web/HTTP/Session.</em></a><em> Accessed 29 June\u00a02021.</em>\n</blockquote>\n<blockquote>\n<em>Contributors to Wikimedia projects. </em>\u201cAPI\u200a\u2014\u200aWikipedia.\u201d <em>Wikipedia, the Free Encyclopedia, Wikimedia Foundation, Inc., 30 July 2001, </em><a href=\"https://en.wikipedia.org/wiki/API.\"><em>https://en.wikipedia.org/wiki/API.</em></a>\n</blockquote>\n<blockquote>\n<em>Contributors to Wikimedia projects. \u201c</em>Interface (Computing)\u200a\u2014\u200aWikipedia.\u201d<em> Wikipedia, the Free Encyclopedia, Wikimedia Foundation, Inc., 26 Apr. 2004, </em><a href=\"https://en.wikipedia.org/wiki/Interface_(computing)#Software_interfaces.\"><em>https://en.wikipedia.org/wiki/Interface_(computing)#Software_interfaces.</em></a>\n</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f64449a2f177\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/codex/on-apis-and-rest-architecture-part-1-f64449a2f177\">On APIs and REST Architecture (Part 1)</a> was originally published in <a href=\"https://medium.com/codex\">CodeX</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
      "enclosure": {},
      "categories": ["api", "javascript", "rest", "http2", "code-newbie"]
    },
    {
      "title": "Understanding The Node.js Events Module",
      "pubDate": "2021-06-24 18:31:43",
      "link": "https://medium.com/@oaluna/understanding-the-node-js-events-module-67b9820e57ea?source=rss-be00f566a88f------2",
      "guid": "https://medium.com/p/67b9820e57ea",
      "author": "Oscar Luna",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*-bokJjJJo9R1IDrR",
      "description": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*-bokJjJJo9R1IDrR\"><figcaption>Photo by <a href=\"https://unsplash.com/@_th4d_?utm_source=medium&amp;utm_medium=referral\">Thaddaeus Lim</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Breaking down the Events Module for your next interview.</p>\n<h4>The EventEmitter Class</h4>\n<p>Hello! Today I would like to go over a question that I was asked at my most recent interview. To quickly fill you in, I was tasked at a recent interview with the following challenge:</p>\n<blockquote>Using JavaScript, write a class, EventEmitter that has three methods: on, emit, and removeListener.</blockquote>\n<blockquote>on(\"eventName\", callbackFn) - a function that takes an eventName and a callbackFn, should save the callbackFn to be called when the event with eventName is\u00a0emitted.</blockquote>\n<blockquote>emit(\"eventName\", data) - a function that takes an eventName and data object, should call the callbackFns associated with that event and pass them the data\u00a0object.</blockquote>\n<blockquote>removeListener(\"eventName\", callbackFn) - a function that takes eventName and callbackFn, should remove that callbackFn from the\u00a0event.</blockquote>\n<p>It turns out that <a href=\"https://dev.to/coderbyte/a-javascript-interview-question-asked-at-google-19f1\">this is an interview question at Google</a>, and I had no valid reason to freeze up the way I did (but that\u2019s another story). If you\u2019re reading this, you\u2019re already making a great move towards preventing this from being you when you have your technical interviews.</p>\n<p>The EventEmitter class is available in the Events Node.js <a href=\"https://nodejs.dev/learn/expose-functionality-from-a-nodejs-file-using-exports\">module</a> and is used to create and consume custom events. Here\u2019s an implementation of EventEmitter in Node\u2019s JavaScript syntax to get a better understanding of how it\u00a0works.</p>\n<a href=\"https://medium.com/media/0299f1899b7fa0d1331d8bf9f8ed7038/href\">https://medium.com/media/0299f1899b7fa0d1331d8bf9f8ed7038/href</a><p>The example above shows a basic implementation of how we can use the EventEmitter class to subscribe to event handlers and call them synchronously using the emit() method. This question is asking specifically to write out the EventEmitter class.</p>\n<h4>The EventEmitter Class</h4>\n<p>Let's start writing our class object using ES6 syntax to ease our understanding (see below). Our class constructor will initialize the event property as an empty object. In the example below I also included the three handlers from the challenge: <em>on()</em>, <em>emit()</em>, and <em>removeListener()</em>.</p>\n<blockquote>\n<strong><em>Also read:</em></strong><em> </em><a href=\"https://www.bacancytechnology.com/blog/file-upload-using-multer-with-nodejs-and-express\">File Upload Using Multer in Node.js and Express.js</a>\n</blockquote>\n<h4>Event Handlers</h4>\n<p>Once we have our class object created as well as the constructor that will hold our events object, we can define the <em>on()</em> handler. This handler will receive the event\u2019s name and an event listener. When triggered, this handler will either return an empty array or will subscribe the listener to the named\u00a0event.</p>\n<p>Our next handler, <em>emit()</em>, must synchronously call back any data subscribed to our named event. Since our named event is stored in an array, we can use <em>forEach() </em>to run our event handler when<em> emit() </em>is\u00a0called<em>.</em></p>\n<p>We have one more handler to define, and that is <em>removeListener(). </em>This handler will, of course, unsubscribe a callback from a named event by filtering out the handler to\u00a0remove.</p>\n<p>And there you have it! Below is an implementation of what we just covered for you to check out and try for yourself.</p>\n<a href=\"https://medium.com/media/37948631d737e318e26b5b76c502f7dd/href\">https://medium.com/media/37948631d737e318e26b5b76c502f7dd/href</a><p>Thank you for reading! Next time I will go over that promised last part of my Graphs series, so stay tuned. Until next\u00a0time!</p>\n<h4>Sources Cited</h4>\n<blockquote>\n<strong>\u201cNode.Js Tutorials\u200a\u2014\u200aFor Beginners and Professionals.\u201d <em>TutorialsTeacher\u200a\u2014\u200aLearn Web Technologies</em>, </strong><a href=\"https://www.tutorialsteacher.com/nodejs/\"><strong>https://www.tutorialsteacher.com/nodejs/.</strong></a><strong> Accessed 22 June\u00a02021.</strong>\n</blockquote>\n<blockquote>\n<strong>\u201cThe Node.Js Events Module.\u201d <em>The Node.Js Events Module</em>, </strong><a href=\"https://www.facebook.com/nodejsfoundation/,\"><strong>https://www.facebook.com/nodejsfoundation/,</strong></a><strong> </strong><a href=\"https://nodejs.dev/learn/the-nodejs-events-module.\"><strong>https://nodejs.dev/learn/the-nodejs-events-module.</strong></a><strong> Accessed 22 June\u00a02021.</strong>\n</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=67b9820e57ea\" width=\"1\" height=\"1\" alt=\"\">\n",
      "content": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*-bokJjJJo9R1IDrR\"><figcaption>Photo by <a href=\"https://unsplash.com/@_th4d_?utm_source=medium&amp;utm_medium=referral\">Thaddaeus Lim</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Breaking down the Events Module for your next interview.</p>\n<h4>The EventEmitter Class</h4>\n<p>Hello! Today I would like to go over a question that I was asked at my most recent interview. To quickly fill you in, I was tasked at a recent interview with the following challenge:</p>\n<blockquote>Using JavaScript, write a class, EventEmitter that has three methods: on, emit, and removeListener.</blockquote>\n<blockquote>on(\"eventName\", callbackFn) - a function that takes an eventName and a callbackFn, should save the callbackFn to be called when the event with eventName is\u00a0emitted.</blockquote>\n<blockquote>emit(\"eventName\", data) - a function that takes an eventName and data object, should call the callbackFns associated with that event and pass them the data\u00a0object.</blockquote>\n<blockquote>removeListener(\"eventName\", callbackFn) - a function that takes eventName and callbackFn, should remove that callbackFn from the\u00a0event.</blockquote>\n<p>It turns out that <a href=\"https://dev.to/coderbyte/a-javascript-interview-question-asked-at-google-19f1\">this is an interview question at Google</a>, and I had no valid reason to freeze up the way I did (but that\u2019s another story). If you\u2019re reading this, you\u2019re already making a great move towards preventing this from being you when you have your technical interviews.</p>\n<p>The EventEmitter class is available in the Events Node.js <a href=\"https://nodejs.dev/learn/expose-functionality-from-a-nodejs-file-using-exports\">module</a> and is used to create and consume custom events. Here\u2019s an implementation of EventEmitter in Node\u2019s JavaScript syntax to get a better understanding of how it\u00a0works.</p>\n<a href=\"https://medium.com/media/0299f1899b7fa0d1331d8bf9f8ed7038/href\">https://medium.com/media/0299f1899b7fa0d1331d8bf9f8ed7038/href</a><p>The example above shows a basic implementation of how we can use the EventEmitter class to subscribe to event handlers and call them synchronously using the emit() method. This question is asking specifically to write out the EventEmitter class.</p>\n<h4>The EventEmitter Class</h4>\n<p>Let's start writing our class object using ES6 syntax to ease our understanding (see below). Our class constructor will initialize the event property as an empty object. In the example below I also included the three handlers from the challenge: <em>on()</em>, <em>emit()</em>, and <em>removeListener()</em>.</p>\n<blockquote>\n<strong><em>Also read:</em></strong><em> </em><a href=\"https://www.bacancytechnology.com/blog/file-upload-using-multer-with-nodejs-and-express\">File Upload Using Multer in Node.js and Express.js</a>\n</blockquote>\n<h4>Event Handlers</h4>\n<p>Once we have our class object created as well as the constructor that will hold our events object, we can define the <em>on()</em> handler. This handler will receive the event\u2019s name and an event listener. When triggered, this handler will either return an empty array or will subscribe the listener to the named\u00a0event.</p>\n<p>Our next handler, <em>emit()</em>, must synchronously call back any data subscribed to our named event. Since our named event is stored in an array, we can use <em>forEach() </em>to run our event handler when<em> emit() </em>is\u00a0called<em>.</em></p>\n<p>We have one more handler to define, and that is <em>removeListener(). </em>This handler will, of course, unsubscribe a callback from a named event by filtering out the handler to\u00a0remove.</p>\n<p>And there you have it! Below is an implementation of what we just covered for you to check out and try for yourself.</p>\n<a href=\"https://medium.com/media/37948631d737e318e26b5b76c502f7dd/href\">https://medium.com/media/37948631d737e318e26b5b76c502f7dd/href</a><p>Thank you for reading! Next time I will go over that promised last part of my Graphs series, so stay tuned. Until next\u00a0time!</p>\n<h4>Sources Cited</h4>\n<blockquote>\n<strong>\u201cNode.Js Tutorials\u200a\u2014\u200aFor Beginners and Professionals.\u201d <em>TutorialsTeacher\u200a\u2014\u200aLearn Web Technologies</em>, </strong><a href=\"https://www.tutorialsteacher.com/nodejs/\"><strong>https://www.tutorialsteacher.com/nodejs/.</strong></a><strong> Accessed 22 June\u00a02021.</strong>\n</blockquote>\n<blockquote>\n<strong>\u201cThe Node.Js Events Module.\u201d <em>The Node.Js Events Module</em>, </strong><a href=\"https://www.facebook.com/nodejsfoundation/,\"><strong>https://www.facebook.com/nodejsfoundation/,</strong></a><strong> </strong><a href=\"https://nodejs.dev/learn/the-nodejs-events-module.\"><strong>https://nodejs.dev/learn/the-nodejs-events-module.</strong></a><strong> Accessed 22 June\u00a02021.</strong>\n</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=67b9820e57ea\" width=\"1\" height=\"1\" alt=\"\">\n",
      "enclosure": {},
      "categories": [
        "nodejs",
        "interview-questions",
        "code-newbie",
        "eventemitter"
      ]
    },
    {
      "title": "JavaScript Data Structures and Algorithms (Graphs, part 3)",
      "pubDate": "2021-06-22 16:39:09",
      "link": "https://medium.com/codex/javascript-data-structures-and-algorithms-graphs-part-3-507c91eff33e?source=rss-be00f566a88f------2",
      "guid": "https://medium.com/p/507c91eff33e",
      "author": "Oscar Luna",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*dFuZ7iDwBYoPkUwO",
      "description": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*dFuZ7iDwBYoPkUwO\"><figcaption>Photo by <a href=\"https://unsplash.com/@derstudi?utm_source=medium&amp;utm_medium=referral\">Timon Studler</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Hello! If you\u2019re reading this and haven\u2019t checked out parts 1 and 2 of this series of articles about graph data\u00a0structures, feel free to read those first. You can find Part 1 <a href=\"https://medium.com/codex/javascript-data-structures-and-algorithms-graphs-67cc1d9bfcc7\">here</a> and Part 2\u00a0<a href=\"https://medium.com/codex/javascript-data-structures-and-algorithms-graphs-part-2-533534289b23\">here</a>.</p>\n<p>Last time I broke down search algorithms for graphs, and their implementations. We discussed the use of a queue to traverse from vertex to vertex and, in the case of DFS, keeping a list (we used a Set in our examples) of visited vertices in order to backtrack up a path. Today I\u2019m going to go over other algorithms you may encounter when working with graphs, particularly ones that derive from depth-first and breadth-first search algorithms. Without further ado, let\u2019s dive right\u00a0in!</p>\n<h4>Dijkstra\u2019s Algorithm</h4>\n<p>We know by now that edges in graphs can be directed or undirected as well as weighted or unweighted. There may come a time where we end up writing a GPS application that calculates the shortest path between two given points on a map. These kinds of problems can be addressed by implementing <em>Dijkstra\u2019s Algorithm</em> to our graph code. Dijkstra\u2019s Algorithm finds the shortest distance between vertices in a graph by measuring the distance to neighboring nodes, level by\u00a0level.</p>\n<p>Dijkstra\u2019s Algorithm is implemented by integrating a variant of breadth-first search where, along with traversal from vertex to vertex, we initialize each edge\u2019s weight at infinity before updating their weight value as our algorithm traverses from an origin. Like BFS, we keep a queue that will hold the vertex our algorithm will traverse to, as well as a list of vertices that have already been\u00a0visited.</p>\n<a href=\"https://medium.com/media/9140f97e006bb30f3341e0dbe5bd3e08/href\">https://medium.com/media/9140f97e006bb30f3341e0dbe5bd3e08/href</a><p>In the example above, prior to traversing, a distance variable is initialized for all vertices relative to the origin as infinity, as well as a variable that will store the minimum distance\u00a0to\u00a0a\u00a0vertex\u00a0with\u00a0relation\u00a0to\u00a0the\u00a0origin. The origin\u2019s distance is then updated from infinity to 0 and then our algorithm traverses to each neighboring vertex. These vertices\u2019 distances in relation to the origin are updated as each one is visited. At the same time, a variable that stores the minimum distance is allotted to memory as well as a variable storing which vertex is the one with the minimum distance from the origin. This means that a vertex has a distance equal to the sum of the distances of each distance between the origin and a given vertex. The shortest path to a vertex is then returned.</p>\n<h4>Topological Sort</h4>\n<p><em>Topological sort </em>is implemented primarily when we want nodes to be processed in a defined order. We can use a Topological Sort if we need a list of dependencies to import some packages before others, as an example. This algorithm creates a linear representation of traversed nodes when executing DFS. In fact, implementing a Topological Sort algorithm is like a depth-first search implemented with a stack to keep the specific order in which a graph\u2019s vertices are traversed.</p>\n<a href=\"https://medium.com/media/43af05de5d594af9d03c98953b752613/href\">https://medium.com/media/43af05de5d594af9d03c98953b752613/href</a><p>The example above also contains a helper function that will add a visited vertex to a stack. The <em>topologicalSort </em>function will keep a similar stack as well as a Set of traversed vertices. This function will also call the recursive helper function to traverse throughout the available paths that have not been visited in\u00a0DFS.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*K8Fq3nAhj7dS1DTNNKfaeg.png\"></figure><p>A visualization of topological sort with each distance initialized at infinity (1), and each updated distance after traversal (2). (From https://visualgo.net)</p>\n<p>In the example above, we\u2019ve initialized the <em>distance </em>variable at <em>Infinity </em>in our helper function. As we execute our depth-first search algorithm, the distance to each vertex in relation to the origin is updated as each one is visited. This is done by keeping track of the vertex with the least distance as well as the smallest distance value itself. These values ( the vertex at that minimum distance and that distance) get updated if a smaller distance is found. At the end of traversal, we will have each vertex\u2019s distance from the origin, the vertex with the lowest distance from the origin, and that distance\u2019s value.</p>\n<p>Thanks for reading! Graph traversal is at times confusing, but persistence is key (just don\u2019t burn yourself out). My next post will be the last in my mini-series on Graphs, where I take our reviewed algorithms and break down the benefits and trade-offs of each implementation including time/Space complexities of each. Until next\u00a0time!</p>\n<h4>Sources Cited</h4>\n<blockquote>Bae, Sammie. <em>JavaScript Data Structures and Algorithms</em>. 1st ed., Apress, 2019, Chapter 17: Graphs (p. 293\u2013301).</blockquote>\n<blockquote>\u201cTopological Sorting Using Javascript DFS.\u201d <em>RxJS, Ggplot2, Python Data Persistence, Caffe2, PyBrain, Python Data Access, H2O, Colab, Theano, Flutter, KNime, Mean.Js, Weka, Solidity</em>, <a href=\"https://www.tutorialspoint.com/Topological-sorting-using-Javascript-DFS.\">https://www.tutorialspoint.com/Topological-sorting-using-Javascript-DFS.</a> Accessed 20 June\u00a02021.</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=507c91eff33e\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/codex/javascript-data-structures-and-algorithms-graphs-part-3-507c91eff33e\">JavaScript Data Structures and Algorithms (Graphs, part 3)</a> was originally published in <a href=\"https://medium.com/codex\">CodeX</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
      "content": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*dFuZ7iDwBYoPkUwO\"><figcaption>Photo by <a href=\"https://unsplash.com/@derstudi?utm_source=medium&amp;utm_medium=referral\">Timon Studler</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Hello! If you\u2019re reading this and haven\u2019t checked out parts 1 and 2 of this series of articles about graph data\u00a0structures, feel free to read those first. You can find Part 1 <a href=\"https://medium.com/codex/javascript-data-structures-and-algorithms-graphs-67cc1d9bfcc7\">here</a> and Part 2\u00a0<a href=\"https://medium.com/codex/javascript-data-structures-and-algorithms-graphs-part-2-533534289b23\">here</a>.</p>\n<p>Last time I broke down search algorithms for graphs, and their implementations. We discussed the use of a queue to traverse from vertex to vertex and, in the case of DFS, keeping a list (we used a Set in our examples) of visited vertices in order to backtrack up a path. Today I\u2019m going to go over other algorithms you may encounter when working with graphs, particularly ones that derive from depth-first and breadth-first search algorithms. Without further ado, let\u2019s dive right\u00a0in!</p>\n<h4>Dijkstra\u2019s Algorithm</h4>\n<p>We know by now that edges in graphs can be directed or undirected as well as weighted or unweighted. There may come a time where we end up writing a GPS application that calculates the shortest path between two given points on a map. These kinds of problems can be addressed by implementing <em>Dijkstra\u2019s Algorithm</em> to our graph code. Dijkstra\u2019s Algorithm finds the shortest distance between vertices in a graph by measuring the distance to neighboring nodes, level by\u00a0level.</p>\n<p>Dijkstra\u2019s Algorithm is implemented by integrating a variant of breadth-first search where, along with traversal from vertex to vertex, we initialize each edge\u2019s weight at infinity before updating their weight value as our algorithm traverses from an origin. Like BFS, we keep a queue that will hold the vertex our algorithm will traverse to, as well as a list of vertices that have already been\u00a0visited.</p>\n<a href=\"https://medium.com/media/9140f97e006bb30f3341e0dbe5bd3e08/href\">https://medium.com/media/9140f97e006bb30f3341e0dbe5bd3e08/href</a><p>In the example above, prior to traversing, a distance variable is initialized for all vertices relative to the origin as infinity, as well as a variable that will store the minimum distance\u00a0to\u00a0a\u00a0vertex\u00a0with\u00a0relation\u00a0to\u00a0the\u00a0origin. The origin\u2019s distance is then updated from infinity to 0 and then our algorithm traverses to each neighboring vertex. These vertices\u2019 distances in relation to the origin are updated as each one is visited. At the same time, a variable that stores the minimum distance is allotted to memory as well as a variable storing which vertex is the one with the minimum distance from the origin. This means that a vertex has a distance equal to the sum of the distances of each distance between the origin and a given vertex. The shortest path to a vertex is then returned.</p>\n<h4>Topological Sort</h4>\n<p><em>Topological sort </em>is implemented primarily when we want nodes to be processed in a defined order. We can use a Topological Sort if we need a list of dependencies to import some packages before others, as an example. This algorithm creates a linear representation of traversed nodes when executing DFS. In fact, implementing a Topological Sort algorithm is like a depth-first search implemented with a stack to keep the specific order in which a graph\u2019s vertices are traversed.</p>\n<a href=\"https://medium.com/media/43af05de5d594af9d03c98953b752613/href\">https://medium.com/media/43af05de5d594af9d03c98953b752613/href</a><p>The example above also contains a helper function that will add a visited vertex to a stack. The <em>topologicalSort </em>function will keep a similar stack as well as a Set of traversed vertices. This function will also call the recursive helper function to traverse throughout the available paths that have not been visited in\u00a0DFS.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*K8Fq3nAhj7dS1DTNNKfaeg.png\"></figure><p>A visualization of topological sort with each distance initialized at infinity (1), and each updated distance after traversal (2). (From https://visualgo.net)</p>\n<p>In the example above, we\u2019ve initialized the <em>distance </em>variable at <em>Infinity </em>in our helper function. As we execute our depth-first search algorithm, the distance to each vertex in relation to the origin is updated as each one is visited. This is done by keeping track of the vertex with the least distance as well as the smallest distance value itself. These values ( the vertex at that minimum distance and that distance) get updated if a smaller distance is found. At the end of traversal, we will have each vertex\u2019s distance from the origin, the vertex with the lowest distance from the origin, and that distance\u2019s value.</p>\n<p>Thanks for reading! Graph traversal is at times confusing, but persistence is key (just don\u2019t burn yourself out). My next post will be the last in my mini-series on Graphs, where I take our reviewed algorithms and break down the benefits and trade-offs of each implementation including time/Space complexities of each. Until next\u00a0time!</p>\n<h4>Sources Cited</h4>\n<blockquote>Bae, Sammie. <em>JavaScript Data Structures and Algorithms</em>. 1st ed., Apress, 2019, Chapter 17: Graphs (p. 293\u2013301).</blockquote>\n<blockquote>\u201cTopological Sorting Using Javascript DFS.\u201d <em>RxJS, Ggplot2, Python Data Persistence, Caffe2, PyBrain, Python Data Access, H2O, Colab, Theano, Flutter, KNime, Mean.Js, Weka, Solidity</em>, <a href=\"https://www.tutorialspoint.com/Topological-sorting-using-Javascript-DFS.\">https://www.tutorialspoint.com/Topological-sorting-using-Javascript-DFS.</a> Accessed 20 June\u00a02021.</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=507c91eff33e\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/codex/javascript-data-structures-and-algorithms-graphs-part-3-507c91eff33e\">JavaScript Data Structures and Algorithms (Graphs, part 3)</a> was originally published in <a href=\"https://medium.com/codex\">CodeX</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
      "enclosure": {},
      "categories": [
        "data-structures",
        "javascript",
        "code-newbie",
        "graph",
        "algorithms"
      ]
    },
    {
      "title": "JavaScript Data Structures And Algorithms (Graphs, Part 2)",
      "pubDate": "2021-06-17 02:32:08",
      "link": "https://medium.com/codex/javascript-data-structures-and-algorithms-graphs-part-2-533534289b23?source=rss-be00f566a88f------2",
      "guid": "https://medium.com/p/533534289b23",
      "author": "Oscar Luna",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*f8BDhTtn0UCxSGS1",
      "description": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*f8BDhTtn0UCxSGS1\"><figcaption>Photo by <a href=\"https://unsplash.com/@jayphoto?utm_source=medium&amp;utm_medium=referral\">Justin W</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Hello! This is a continuation of my breakdown of graph data structures. Last time we discussed some of the different graph types that are often used (cyclic/acyclic, directed/undirected, weighted/unweighted) and their implementations in Javascript. You can catch part 1 of this post <a href=\"https://medium.com/@be00f566a88f/67cc1d9bfcc7?sk=\">here</a>. Today, I will go over breadth-first search and depth-first search as well as some real-world uses for them. Let\u2019s dive right\u00a0in!</p>\n<h4>Breadth-First Search and Depth-First Search in\u00a0Graphs</h4>\n<p>Since graphs can be directed or undirected, they can be traversed to search for vertices. Like trees (which can be considered as a type of graph), we can run search algorithms in graphs by using <a href=\"https://medium.com/codex/javascript-data-structures-and-algorithms-search-algorithms-part-2-6f7c577b32e9\"><em>breadth-first search</em> and <em>depth-first search</em></a><em>. </em>There are minute differences in their implementation but are otherwise identical in structure. For example, when executing BFS, graphs will check a vertex\u2019s neighbors before traversing to the next vertex, similar to how trees will visit all children on one level before traversing to the next level to visit their children.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/680/1*7RHDUmMCbjNu9DlnW9Xapw.png\"><figcaption>A visualization of Breadth-First Search in a directed unweighted graph, displaying the current vertex (orange) visiting its nearest adjacent nodes (blue). (created at https://visualgo.net)</figcaption></figure><p>In the example above, starting from 0, BFS would visit vertices 1 and 2 before traversing to vertex 1\u00a0and\u00a0visiting\u00a0its\u00a0adjacent\u00a0vertices.</p>\n<h3>Implementation</h3>\n<p>If we were to implement BFS, the first thing we must do is define an entry point. We aren\u2019t bound to the designated root as we would be with a tree, but we still need an initial point defined. If we were to assign 0 as our point of entry in the bottom graph in the example above, BFS would first visit any vertices that share an edge with it (0, 1, 3,\u00a05).</p>\n<p>We also need to initialize a queue variable as an empty object that we push the traversed vertex into and a list of already visited vertices. Our queue will extract the list of adjacent vertices from each key inserted and will check each one for a match. This is comparable to how BFS would visit a parent node\u2019s children in search of a match. After visiting each neighbor our BFS method will traverse to the next key in the adjacency list. Below is an implementation of a breadth-first search method for an undirected graph:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*kyZ6taNmmGzM4aRM7z65gw.png\"></figure><p>Breadth-first search is used in many large-scale web applications. One use for this approach can be to measure the distance in miles between two points on a map, given that the graph has weighted edges to indicate the number of miles between vertices. We can also measure the relevance to a list of results for search queries if we are building a search engine. Or perhaps you want to provide a list of recommended friends, to which BFS would measure a user\u2019s relationship to a recommended user according to tiered similarities such as mutual friends, familial ties, common interests, etc. BFS is an optimal approach if a target vertex is near its graph\u2019s point of\u00a0entry.</p>\n<h3>Depth-First Search</h3>\n<p>The similarities in implementations of depth-first search between graphs and tree data structures are, like BFS, very few. Like binary search trees, we can traverse a graph by visiting a vertex\u2019s children before any of its siblings. This means DFS traverses down a branch to its deepest level before moving on to other nodes. DFS is used to visit each vertex in a path before moving on to the next neighboring vertex. In the example below, the vertex with a value of 0 is the entry point, and in order, DFS traverses all the way down a path of connected vertices until no longer possible before moving on down the next path. From 0, DFS will traverse down to its neighboring vertex valued 1 (as well as its adjacent nodes) before moving on to its other adjacent vertex at\u00a02.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/698/1*TTULwYdlA6hqE6laYxQJBg.png\"><figcaption>A visualization of Depth-First Search, where traverse a single path (red) of adjacent nodes is visited (blue) before moving on to any other paths connected to the source. (created at <a href=\"https://visualgo.net)./\">https://visualgo.net)</a></figcaption></figure><p>We can implement a depth-first search method by creating a Stack or a queue that will hold the order of traversal. We can pair this with a list, like a Set that will hold the nodes that we have already traversed. If you take a look below, this example of DFS pops the next vertex in the traversal sequenced and stored into a variable (<em>nextVertex</em>). While vertices get pushed to the Stack, vertices that have been visited are pushed to the <em>exploredVertex</em> set.</p>\n<a href=\"https://medium.com/media/289b67a4f3c3f0a657caf205d6b8647e/href\">https://medium.com/media/289b67a4f3c3f0a657caf205d6b8647e/href</a><p>Once a path is traversed as deeply as possible, DFS checks other adjacent edges for a path that hasn\u2019t been visited yet. In other words, if it isn\u2019t in the Set of visited nodes, then the next edge in the sequence will be traversed. This also makes sure that a DFS algorithm does not visit a vertex more than once. Traversal this way, exploring by <em>depth, </em>can be used as a solution for searching for the existence of a value in a graph or finding the shortest path from one vertex to another, based on the weight of the path\u2019s edges, or searching for the existence of a cycle in a\u00a0graph.</p>\n<p>Like with a binary search tree, DFS can be implemented in a graph recursively, given that traversal requires backtracking of already visited vertices to continue to the next possible path. We need a base case to implement a recursive approach; the lowest possible value that ends the recursive callback. The example below shows this base case as well as our recursive callback.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*T-bDydyvc9euYVvr6dmo2Q.png\"></figure><p>Depth-First Search, implemented using a recursive approach.</p>\n<p>Our recursive function receives the next vertex in the defined queue as well as the list of visited vertices. Once the base case is reached in a path, DFS will backtrack to the point of origin and repeat the process for the next adjacent\u00a0path.</p>\n<p>Thank you for reading! Next time I\u2019ll go over a couple of more graph algorithms including Dijkstra\u2019s Algorithm and Topological Sort, as well as the time complexities of the algorithms reviewed in this article. Until next\u00a0time!</p>\n<h3>Sources Cited</h3>\n<blockquote>Cheswick, W.; Burch, H. (April 1999). \u201cMapping the Internet\u201d. IEEE Computer. 32\u00a0(4).</blockquote>\n<blockquote>Heisey, Zac. \u201cObjects vs. Arrays. Both Objects and Arrays Are Considered\u2026 | by Zac Heisey | Medium.\u201d <em>Medium</em>, Medium, 25 Apr. 2019, <a href=\"https://medium.com/@zac_heisey/objects-vs-arrays-42601ff79421.\">https://medium.com/@zac_heisey/objects-vs-arrays-42601ff79421.</a>\n</blockquote>\n<blockquote>Bae, Sammie. JavaScript Data Structures and Algorithms. 1st ed., Apress, 2019, p.\u00a0279.</blockquote>\n<blockquote>Mejia, Adrian. \u201cGraph Data Structures in JavaScript for Beginners | Adrian Mejia Blog.\u201d <em>Adrian Mejia Blog</em>, Adam Mejia, 15 Dec. 2020,l https://adrianmejia.com/data-structures-for-beginners-graphs-time-complexity-tutorial/.</blockquote>\n<blockquote>\u201cGraph Traversals | Zero To Mastery Academy.\u201d <em>ZTM Academy | Zero To Mastery Academy</em>, ZeroToMastery, 2021, <a href=\"https://academy.zerotomastery.io/courses/master-the-coding-interview-data-structures-algorithms/lectures/12670913.\">https://academy.zerotomastery.io/courses/master-the-coding-interview-data-structures-algorithms/lectures/12670913.</a>\n</blockquote>\n<blockquote>\u201cDepth-First Search Traversal in Javascript.\u201d <em>RxJS, Ggplot2, Python Data Persistence, Caffe2, PyBrain, Python Data Access, H2O, Colab, Theano, Flutter, KNime, Mean.Js, Weka, Solidity</em>, <a href=\"https://www.tutorialspoint.com/Depth-first-search-traversal-in-Javascript.\">https://www.tutorialspoint.com/Depth-first-search-traversal-in-Javascript.</a> Accessed 15 June\u00a02021.</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=533534289b23\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/codex/javascript-data-structures-and-algorithms-graphs-part-2-533534289b23\">JavaScript Data Structures And Algorithms (Graphs, Part 2)</a> was originally published in <a href=\"https://medium.com/codex\">CodeX</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
      "content": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*f8BDhTtn0UCxSGS1\"><figcaption>Photo by <a href=\"https://unsplash.com/@jayphoto?utm_source=medium&amp;utm_medium=referral\">Justin W</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Hello! This is a continuation of my breakdown of graph data structures. Last time we discussed some of the different graph types that are often used (cyclic/acyclic, directed/undirected, weighted/unweighted) and their implementations in Javascript. You can catch part 1 of this post <a href=\"https://medium.com/@be00f566a88f/67cc1d9bfcc7?sk=\">here</a>. Today, I will go over breadth-first search and depth-first search as well as some real-world uses for them. Let\u2019s dive right\u00a0in!</p>\n<h4>Breadth-First Search and Depth-First Search in\u00a0Graphs</h4>\n<p>Since graphs can be directed or undirected, they can be traversed to search for vertices. Like trees (which can be considered as a type of graph), we can run search algorithms in graphs by using <a href=\"https://medium.com/codex/javascript-data-structures-and-algorithms-search-algorithms-part-2-6f7c577b32e9\"><em>breadth-first search</em> and <em>depth-first search</em></a><em>. </em>There are minute differences in their implementation but are otherwise identical in structure. For example, when executing BFS, graphs will check a vertex\u2019s neighbors before traversing to the next vertex, similar to how trees will visit all children on one level before traversing to the next level to visit their children.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/680/1*7RHDUmMCbjNu9DlnW9Xapw.png\"><figcaption>A visualization of Breadth-First Search in a directed unweighted graph, displaying the current vertex (orange) visiting its nearest adjacent nodes (blue). (created at https://visualgo.net)</figcaption></figure><p>In the example above, starting from 0, BFS would visit vertices 1 and 2 before traversing to vertex 1\u00a0and\u00a0visiting\u00a0its\u00a0adjacent\u00a0vertices.</p>\n<h3>Implementation</h3>\n<p>If we were to implement BFS, the first thing we must do is define an entry point. We aren\u2019t bound to the designated root as we would be with a tree, but we still need an initial point defined. If we were to assign 0 as our point of entry in the bottom graph in the example above, BFS would first visit any vertices that share an edge with it (0, 1, 3,\u00a05).</p>\n<p>We also need to initialize a queue variable as an empty object that we push the traversed vertex into and a list of already visited vertices. Our queue will extract the list of adjacent vertices from each key inserted and will check each one for a match. This is comparable to how BFS would visit a parent node\u2019s children in search of a match. After visiting each neighbor our BFS method will traverse to the next key in the adjacency list. Below is an implementation of a breadth-first search method for an undirected graph:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*kyZ6taNmmGzM4aRM7z65gw.png\"></figure><p>Breadth-first search is used in many large-scale web applications. One use for this approach can be to measure the distance in miles between two points on a map, given that the graph has weighted edges to indicate the number of miles between vertices. We can also measure the relevance to a list of results for search queries if we are building a search engine. Or perhaps you want to provide a list of recommended friends, to which BFS would measure a user\u2019s relationship to a recommended user according to tiered similarities such as mutual friends, familial ties, common interests, etc. BFS is an optimal approach if a target vertex is near its graph\u2019s point of\u00a0entry.</p>\n<h3>Depth-First Search</h3>\n<p>The similarities in implementations of depth-first search between graphs and tree data structures are, like BFS, very few. Like binary search trees, we can traverse a graph by visiting a vertex\u2019s children before any of its siblings. This means DFS traverses down a branch to its deepest level before moving on to other nodes. DFS is used to visit each vertex in a path before moving on to the next neighboring vertex. In the example below, the vertex with a value of 0 is the entry point, and in order, DFS traverses all the way down a path of connected vertices until no longer possible before moving on down the next path. From 0, DFS will traverse down to its neighboring vertex valued 1 (as well as its adjacent nodes) before moving on to its other adjacent vertex at\u00a02.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/698/1*TTULwYdlA6hqE6laYxQJBg.png\"><figcaption>A visualization of Depth-First Search, where traverse a single path (red) of adjacent nodes is visited (blue) before moving on to any other paths connected to the source. (created at <a href=\"https://visualgo.net)./\">https://visualgo.net)</a></figcaption></figure><p>We can implement a depth-first search method by creating a Stack or a queue that will hold the order of traversal. We can pair this with a list, like a Set that will hold the nodes that we have already traversed. If you take a look below, this example of DFS pops the next vertex in the traversal sequenced and stored into a variable (<em>nextVertex</em>). While vertices get pushed to the Stack, vertices that have been visited are pushed to the <em>exploredVertex</em> set.</p>\n<a href=\"https://medium.com/media/289b67a4f3c3f0a657caf205d6b8647e/href\">https://medium.com/media/289b67a4f3c3f0a657caf205d6b8647e/href</a><p>Once a path is traversed as deeply as possible, DFS checks other adjacent edges for a path that hasn\u2019t been visited yet. In other words, if it isn\u2019t in the Set of visited nodes, then the next edge in the sequence will be traversed. This also makes sure that a DFS algorithm does not visit a vertex more than once. Traversal this way, exploring by <em>depth, </em>can be used as a solution for searching for the existence of a value in a graph or finding the shortest path from one vertex to another, based on the weight of the path\u2019s edges, or searching for the existence of a cycle in a\u00a0graph.</p>\n<p>Like with a binary search tree, DFS can be implemented in a graph recursively, given that traversal requires backtracking of already visited vertices to continue to the next possible path. We need a base case to implement a recursive approach; the lowest possible value that ends the recursive callback. The example below shows this base case as well as our recursive callback.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*T-bDydyvc9euYVvr6dmo2Q.png\"></figure><p>Depth-First Search, implemented using a recursive approach.</p>\n<p>Our recursive function receives the next vertex in the defined queue as well as the list of visited vertices. Once the base case is reached in a path, DFS will backtrack to the point of origin and repeat the process for the next adjacent\u00a0path.</p>\n<p>Thank you for reading! Next time I\u2019ll go over a couple of more graph algorithms including Dijkstra\u2019s Algorithm and Topological Sort, as well as the time complexities of the algorithms reviewed in this article. Until next\u00a0time!</p>\n<h3>Sources Cited</h3>\n<blockquote>Cheswick, W.; Burch, H. (April 1999). \u201cMapping the Internet\u201d. IEEE Computer. 32\u00a0(4).</blockquote>\n<blockquote>Heisey, Zac. \u201cObjects vs. Arrays. Both Objects and Arrays Are Considered\u2026 | by Zac Heisey | Medium.\u201d <em>Medium</em>, Medium, 25 Apr. 2019, <a href=\"https://medium.com/@zac_heisey/objects-vs-arrays-42601ff79421.\">https://medium.com/@zac_heisey/objects-vs-arrays-42601ff79421.</a>\n</blockquote>\n<blockquote>Bae, Sammie. JavaScript Data Structures and Algorithms. 1st ed., Apress, 2019, p.\u00a0279.</blockquote>\n<blockquote>Mejia, Adrian. \u201cGraph Data Structures in JavaScript for Beginners | Adrian Mejia Blog.\u201d <em>Adrian Mejia Blog</em>, Adam Mejia, 15 Dec. 2020,l https://adrianmejia.com/data-structures-for-beginners-graphs-time-complexity-tutorial/.</blockquote>\n<blockquote>\u201cGraph Traversals | Zero To Mastery Academy.\u201d <em>ZTM Academy | Zero To Mastery Academy</em>, ZeroToMastery, 2021, <a href=\"https://academy.zerotomastery.io/courses/master-the-coding-interview-data-structures-algorithms/lectures/12670913.\">https://academy.zerotomastery.io/courses/master-the-coding-interview-data-structures-algorithms/lectures/12670913.</a>\n</blockquote>\n<blockquote>\u201cDepth-First Search Traversal in Javascript.\u201d <em>RxJS, Ggplot2, Python Data Persistence, Caffe2, PyBrain, Python Data Access, H2O, Colab, Theano, Flutter, KNime, Mean.Js, Weka, Solidity</em>, <a href=\"https://www.tutorialspoint.com/Depth-first-search-traversal-in-Javascript.\">https://www.tutorialspoint.com/Depth-first-search-traversal-in-Javascript.</a> Accessed 15 June\u00a02021.</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=533534289b23\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/codex/javascript-data-structures-and-algorithms-graphs-part-2-533534289b23\">JavaScript Data Structures And Algorithms (Graphs, Part 2)</a> was originally published in <a href=\"https://medium.com/codex\">CodeX</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
      "enclosure": {},
      "categories": [
        "algorithms",
        "code-newbie",
        "javascript",
        "data-structures",
        "graph"
      ]
    }
  ]
}
